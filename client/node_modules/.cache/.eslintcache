[{"R:\\CryptoCare\\client\\src\\index.js":"1","R:\\CryptoCare\\client\\src\\App.jsx":"2","R:\\CryptoCare\\client\\src\\routes.js":"3","R:\\CryptoCare\\client\\src\\contexts\\AlertContext\\AlertContext.js":"4","R:\\CryptoCare\\client\\src\\contexts\\PermissionContext\\PermissionContext.jsx":"5","R:\\CryptoCare\\client\\src\\contexts\\EthContext\\index.js":"6","R:\\CryptoCare\\client\\src\\pages\\doctor\\RegisterPatient.jsx":"7","R:\\CryptoCare\\client\\src\\pages\\admin\\RegisterHospital.jsx":"8","R:\\CryptoCare\\client\\src\\pages\\admin\\SearchHospital.jsx":"9","R:\\CryptoCare\\client\\src\\pages\\admin\\SearchDoctor.jsx":"10","R:\\CryptoCare\\client\\src\\pages\\patient\\ViewRequests.jsx":"11","R:\\CryptoCare\\client\\src\\pages\\patient\\ViewEmergencyAccess.jsx":"12","R:\\CryptoCare\\client\\src\\pages\\emergencyPerson\\SeeRequests.jsx":"13","R:\\CryptoCare\\client\\src\\pages\\patient\\GiveEmergencyAccess.jsx":"14","R:\\CryptoCare\\client\\src\\components\\layouts\\AlertPopup.jsx":"15","R:\\CryptoCare\\client\\src\\components\\layouts\\Layout.jsx":"16","R:\\CryptoCare\\client\\src\\contexts\\EthContext\\EthContext.js":"17","R:\\CryptoCare\\client\\src\\contexts\\EthContext\\useEth.js":"18","R:\\CryptoCare\\client\\src\\contexts\\EthContext\\state.js":"19","R:\\CryptoCare\\client\\src\\pages\\doctor\\index.jsx":"20","R:\\CryptoCare\\client\\src\\pages\\patient\\index.jsx":"21","R:\\CryptoCare\\client\\src\\pages\\index.jsx":"22","R:\\CryptoCare\\client\\src\\pages\\admin\\index.jsx":"23","R:\\CryptoCare\\client\\src\\pages\\unknown\\index.jsx":"24","R:\\CryptoCare\\client\\src\\contexts\\EthContext\\EthProvider.jsx":"25","R:\\CryptoCare\\client\\src\\contexts\\AlertContext\\useAlert.js":"26","R:\\CryptoCare\\client\\src\\components\\CustomButton.jsx":"27","R:\\CryptoCare\\client\\src\\components\\Hospital.jsx":"28","R:\\CryptoCare\\client\\src\\components\\Doctor.jsx":"29","R:\\CryptoCare\\client\\src\\components\\RequestEmergency.jsx":"30","R:\\CryptoCare\\client\\src\\components\\Emergency.jsx":"31","R:\\CryptoCare\\client\\src\\components\\Request.jsx":"32","R:\\CryptoCare\\client\\src\\components\\access\\adminAccess.jsx":"33","R:\\CryptoCare\\client\\src\\components\\access\\patientAccess.jsx":"34","R:\\CryptoCare\\client\\src\\components\\access\\emergencyAccess.jsx":"35","R:\\CryptoCare\\client\\src\\components\\access\\doctorAccess.jsx":"36","R:\\CryptoCare\\client\\src\\ipfs.js":"37","R:\\CryptoCare\\client\\src\\components\\Record.jsx":"38","R:\\CryptoCare\\client\\src\\pages\\doctor\\AddRecordModal.jsx":"39","R:\\CryptoCare\\client\\src\\components\\Patient.jsx":"40"},{"size":354,"mtime":1709230618000,"results":"41","hashOfConfig":"42"},{"size":524,"mtime":1709230618000,"results":"43","hashOfConfig":"42"},{"size":3776,"mtime":1709230618000,"results":"44","hashOfConfig":"42"},{"size":767,"mtime":1709230618000,"results":"45","hashOfConfig":"42"},{"size":442,"mtime":1709230618000,"results":"46","hashOfConfig":"42"},{"size":185,"mtime":1709230618000,"results":"47","hashOfConfig":"42"},{"size":8434,"mtime":1709230618000,"results":"48","hashOfConfig":"42"},{"size":4828,"mtime":1709230618000,"results":"49","hashOfConfig":"42"},{"size":5656,"mtime":1709230618000,"results":"50","hashOfConfig":"42"},{"size":4429,"mtime":1709230618000,"results":"51","hashOfConfig":"42"},{"size":3075,"mtime":1709230618000,"results":"52","hashOfConfig":"42"},{"size":3361,"mtime":1709230618000,"results":"53","hashOfConfig":"42"},{"size":3677,"mtime":1709230618000,"results":"54","hashOfConfig":"42"},{"size":6535,"mtime":1709230618000,"results":"55","hashOfConfig":"42"},{"size":793,"mtime":1709230618000,"results":"56","hashOfConfig":"42"},{"size":3313,"mtime":1709230618000,"results":"57","hashOfConfig":"42"},{"size":109,"mtime":1709230618000,"results":"58","hashOfConfig":"42"},{"size":151,"mtime":1709230618000,"results":"59","hashOfConfig":"42"},{"size":584,"mtime":1709230618000,"results":"60","hashOfConfig":"42"},{"size":9456,"mtime":1709230618000,"results":"61","hashOfConfig":"42"},{"size":2904,"mtime":1709230618000,"results":"62","hashOfConfig":"42"},{"size":5053,"mtime":1710691450709,"results":"63","hashOfConfig":"42"},{"size":7397,"mtime":1709230618000,"results":"64","hashOfConfig":"42"},{"size":985,"mtime":1709230618000,"results":"65","hashOfConfig":"42"},{"size":1903,"mtime":1709230618000,"results":"66","hashOfConfig":"42"},{"size":161,"mtime":1709230618000,"results":"67","hashOfConfig":"42"},{"size":629,"mtime":1710743865492,"results":"68","hashOfConfig":"42"},{"size":1774,"mtime":1709230618000,"results":"69","hashOfConfig":"42"},{"size":2698,"mtime":1709230618000,"results":"70","hashOfConfig":"42"},{"size":2893,"mtime":1709230618000,"results":"71","hashOfConfig":"42"},{"size":3844,"mtime":1709230618000,"results":"72","hashOfConfig":"42"},{"size":2849,"mtime":1709230618000,"results":"73","hashOfConfig":"42"},{"size":1456,"mtime":1709230618000,"results":"74","hashOfConfig":"42"},{"size":1466,"mtime":1709230618000,"results":"75","hashOfConfig":"42"},{"size":1498,"mtime":1709230618000,"results":"76","hashOfConfig":"42"},{"size":1461,"mtime":1709230618000,"results":"77","hashOfConfig":"42"},{"size":404,"mtime":1709230618000,"results":"78","hashOfConfig":"42"},{"size":4018,"mtime":1709230618000,"results":"79","hashOfConfig":"42"},{"size":3293,"mtime":1709230618000,"results":"80","hashOfConfig":"42"},{"size":3063,"mtime":1709230618000,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1io3e0g",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"84"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"84"},"R:\\CryptoCare\\client\\src\\index.js",[],["185","186"],"R:\\CryptoCare\\client\\src\\App.jsx",[],"R:\\CryptoCare\\client\\src\\routes.js",["187"],"// Guards\r\nimport Layout from './components/layouts/Layout'\r\nimport AlertPopup from './components/layouts/AlertPopup'\r\n\r\n// Pages\r\nimport Home from './pages'\r\nimport Patient from './pages/patient'\r\nimport Doctor from './pages/doctor'\r\nimport HeaderAppBar from './components/layouts/Layout'\r\nimport Unknown from './pages/unknown'\r\nimport Admin from './pages/admin'\r\nimport RegisterPatient from './pages/doctor/RegisterPatient'\r\nimport RegisterHospital from './pages/admin/RegisterHospital'\r\nimport SearchHospital from './pages/admin/SearchHospital'\r\nimport SearchDoctor from './pages/admin/SearchDoctor'\r\nimport ViewRequests from './pages/patient/ViewRequests'\r\nimport GiveEmergencyAccess from './pages/patient/GiveEmergencyAccess'\r\nimport ViewEmergencyAccess from './pages/patient/ViewEmergencyAccess'\r\nimport SeeRequests from './pages/emergencyPerson/SeeRequests'\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    children: [\r\n      {\r\n        path: '',\r\n        element: (\r\n          <>\r\n            <AlertPopup />\r\n            <Home />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'admin',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <Admin />\r\n          </>\r\n        ),\r\n      },\r\n       {\r\n        path: 'admin/registerDoctor',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <Admin />\r\n          </>\r\n        ),\r\n      },\r\n       {\r\n        path: 'admin/searchDoctor',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <SearchDoctor />\r\n          </>\r\n        ),\r\n      },\r\n       {\r\n        path: 'admin/registerHospital',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <RegisterHospital />\r\n          </>\r\n        ),\r\n      },\r\n       {\r\n        path: 'admin/searchHospital',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <SearchHospital />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'patient',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <Patient />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'patient/viewAccessRequests',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <ViewRequests />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'patient/giveEmergencyAccess',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <GiveEmergencyAccess />\r\n          </>\r\n        ),\r\n      },\r\n       {\r\n        path: 'patient/viewEmergencyAccess',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <ViewEmergencyAccess />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'doctor',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <Doctor />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'doctor/registerPatient',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <RegisterPatient />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n       path: 'emergencyPerson/seeRequests',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <SeeRequests />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        path: 'unknown',\r\n        element: (\r\n          <>\r\n            <HeaderAppBar />\r\n            <AlertPopup />\r\n            <Unknown />\r\n          </>\r\n        ),\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nexport default routes\r\n","R:\\CryptoCare\\client\\src\\contexts\\AlertContext\\AlertContext.js",[],"R:\\CryptoCare\\client\\src\\contexts\\PermissionContext\\PermissionContext.jsx",[],"R:\\CryptoCare\\client\\src\\contexts\\EthContext\\index.js",[],"R:\\CryptoCare\\client\\src\\pages\\doctor\\RegisterPatient.jsx",["188","189","190","191","192","193"],"import { Box, Divider, FormControl,Select,InputLabel,MenuItem, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport validator from 'validator'\r\nimport '../../App.css'\r\nimport DoctorAccess from '../../components/access/doctorAccess'\r\n\r\n\r\n  \r\n  const RegisterPatient = () => {\r\n    const {\r\n    state: { contract, accounts, role, loading},\r\n  } = useEth()\r\n  const { setAlert } = useAlert()\r\n\r\n  const [addPatientAddress, setAddPatientAddress] = useState('')\r\n  const [addPatientName,setAddPatientName] = useState('')\r\n  const [addPatientAge,setAddPatientAge] = useState('')\r\n  const [addPatientGender,setAddPatientGender] = useState('')\r\n  const [addPatientContact,setAddPatientContact] = useState('')\r\n  const [addPatientLocation,setAddPatientLocation] = useState('')\r\n  const [addPatientCause,setAddPatientCause] = useState('')\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const registerPatient = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(addPatientAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      if(addPatientName == \"\"){\r\n        setAlert('Please enter valid Name','error')\r\n        return\r\n      }\r\n      if(addPatientAge == \"\"){\r\n        setAlert('Please enter valid Age','error')\r\n        return\r\n      }\r\n      if(addPatientGender == \"\"){\r\n        setAlert('Please enter valid gender','error')\r\n        return\r\n      }\r\n      if(!validator.isMobilePhone(addPatientContact)){\r\n        setAlert('Please enter valid mobile number','error')\r\n        return\r\n      }\r\n      if(addPatientLocation == \"\"){\r\n        setAlert('Please enter valid location','error')\r\n        return\r\n      }if(addPatientCause == \"\"){\r\n        setAlert('Please enter valid cause','error')\r\n        return\r\n      }\r\n      await contract.methods.addPatient(addPatientAddress,addPatientName,Number.parseInt(addPatientAge),addPatientGender,addPatientContact,addPatientLocation,addPatientCause).send({ from: accounts[0] })\r\n        setAlert('Patient registered successfully!','success')\r\n    } catch (err) {\r\n      setAlert('Registration failed!','error')\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n   if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n             \r\n              {role === 'doctor' && (\r\n                <>\r\n          \r\n                  <Typography variant='h4'>Register Patient</Typography>\r\n\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Register patient by wallet address'\r\n                        value={addPatientAddress}\r\n                        onChange={e => setAddPatientAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter patient name'\r\n                        value={addPatientName}\r\n                        onChange={e => setAddPatientName(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter patient age'\r\n                        value={addPatientAge}\r\n                        onChange={e => setAddPatientAge(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel sx={{fontSize:\"15px\"}} id=\"demo-simple-select-label\">Gender</InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={addPatientGender}\r\n                        label=\"Gender\"\r\n                        onChange={(e) => setAddPatientGender(e.target.value)}\r\n                        sx={{fontSize:\"15px\"}}\r\n                      >\r\n                        <MenuItem sx={{fontSize:\"15px\"}} value={\"male\"}>Male</MenuItem>\r\n                        <MenuItem sx={{fontSize:\"15px\"}} value={\"female\"}>Female</MenuItem>\r\n                        <MenuItem sx={{fontSize:\"15px\"}} value={\"transgender\"}>Transgender</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter patient mobile number'\r\n                        value={addPatientContact}\r\n                        onChange={e => setAddPatientContact(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <textarea\r\n                        rows=\"8\"\r\n                        cols=\"50\"\r\n                        placeholder='Enter patient location'\r\n                        value={addPatientLocation}\r\n                        onChange={e => setAddPatientLocation(e.target.value)}\r\n                      ></textarea>\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter patient problem'\r\n                        value={addPatientCause}\r\n                        onChange={e => setAddPatientCause(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Register'} handleClick={() => registerPatient()}>\r\n                        <PersonAddAlt1RoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                </>\r\n              )}\r\n              <DoctorAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default RegisterPatient","R:\\CryptoCare\\client\\src\\pages\\admin\\RegisterHospital.jsx",["194","195","196","197"],"import { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React from 'react'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport { useState } from 'react'\r\nimport '../../App.css'\r\nimport validator from 'validator'\r\nimport AdminAccess from '../../components/access/adminAccess'\r\n\r\nconst RegisterHospital = () => {\r\n\r\nconst [hospitalAddress,setHospitalAddress] = useState('')\r\nconst [hospitalName,setHospitalName] = useState('')\r\nconst [hospitalContact,setHospitalContact] = useState('')\r\n\r\n\r\n  const {\r\n    state: { contract, accounts, role, loading }\r\n  } = useEth()\r\n\r\n  const {setAlert} = useAlert()\r\n  const navigate = useNavigate()\r\n\r\n  const registerHospital = async () => {\r\n    try {\r\n    \r\n       if (!/^(0x)?[0-9a-f]{40}$/i.test(hospitalAddress)) {\r\n        setAlert('Please enter a valid hospital address', 'error')\r\n        return\r\n      }\r\n      if(hospitalName == \"\"){\r\n        setAlert('Please enter valid hospital name','error')\r\n        return\r\n      }\r\n      if(!validator.isMobilePhone(hospitalContact,'en-IN')){\r\n        setAlert(\"Please enter valid hospital mobile no\",'error')\r\n        return\r\n      }\r\n    \r\n\r\n      await contract.methods.addHospital(hospitalAddress,hospitalName,hospitalContact).send({ from: accounts[0] })\r\n      setAlert('Hospital Added Successfully!','success')\r\n      // dispatch({\r\n      //   type: 'ADD_DOCTOR',\r\n      // })\r\n    } catch (err) {\r\n      setAlert(\"transaction failed!\",'error')\r\n      console.error(err)\r\n    }\r\n  }\r\n   if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else{\r\n\r\n   return (\r\n    <>\r\n      {role === 'admin' && (\r\n          <div className='register-doctor'>\r\n          <Box display='flex' flexDirection='column' alignItems='center'>\r\n            {/*<Box mb={2}>*/}\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter hospital address'\r\n                        value={hospitalAddress}\r\n                        onChange={e => setHospitalAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter hospital Name'\r\n                        value={hospitalName}\r\n                        onChange={e => setHospitalName(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter hospital Mobile Number'\r\n                        value={hospitalContact}\r\n                        onChange={e => setHospitalContact(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n              <CustomButton text='Hospital Register' handleClick={() => registerHospital()}>\r\n                <PersonAddAlt1RoundedIcon style={{ color: 'white' }} />\r\n              </CustomButton>\r\n            {/*</Box>*/}\r\n            <Typography variant='h5' color='black'>\r\n              If you are a patient, ask your doctor to register for you\r\n            </Typography>\r\n          </Box>\r\n          </div> \r\n\r\n        )}\r\n        <AdminAccess role={role}/>\r\n     \r\n          </>\r\n        )\r\n }\r\n\r\n}\r\n\r\nexport default RegisterHospital","R:\\CryptoCare\\client\\src\\pages\\admin\\SearchHospital.jsx",["198","199","200","201","202","203","204"],"import { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React, { useCallback,useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport CloudUploadRoundedIcon from '@mui/icons-material/CloudUploadRounded'\r\nimport Hospital from '../../components/Hospital'\r\nimport Doctor from '../../components/Doctor'\r\nimport AdminAccess from '../../components/access/adminAccess'\r\n\r\n\r\n\r\n\r\n\r\nconst SearchHospital = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n  const { setAlert } = useAlert()\r\n\r\n  const [hospitalExist, setHospitalExist] = useState(false)\r\n  const [searchHospitalAddress, setSearchHospitalAddress] = useState('')\r\n  const [hospitalDetails,setHospitalDetails] = useState([])\r\n  \r\n  \r\n\r\n  const searchHospital = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(searchHospitalAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      const hospitalExists = await contract.methods.getHospitalExists(searchHospitalAddress).call({ from: accounts[0] })\r\n      if (hospitalExists) {\r\n        setHospitalExist(true)\r\n    \r\n        \r\n        // setAlert(\"you have access\",\"success\")\r\n        const hospitalDetails = await contract.methods.getHospital(searchHospitalAddress).call({ from: accounts[0] })\r\n        console.log(' details :>> ', hospitalDetails)\r\n        setHospitalDetails(hospitalDetails)\r\n      }\r\n      else{\r\n        setAlert(\"Hospital not exist, register hospital!\",\"error\")\r\n        // setAccess(false)\r\n\r\n      }\r\n\r\n      \r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              \r\n              {role === 'admin' && (\r\n                <>\r\n\r\n                  <Typography variant='h4'>Hospital Details</Typography>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Search Hospital by wallet address'\r\n                        value={searchHospitalAddress}\r\n                        onChange={e => setSearchHospitalAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Search'} handleClick={() => {searchHospital()}}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  {hospitalExist && hospitalDetails.length === 0 && (\r\n                    <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>No records found</Typography>\r\n                    </Box>\r\n                  )}\r\n\r\n                  {hospitalExist && hospitalDetails.length > 0 && (\r\n                    <>\r\n                    <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                        <Box mb={2}>\r\n                          <Hospital  hospital={hospitalDetails}/>\r\n                        </Box>\r\n                    </Box>\r\n                    {hospitalDetails[hospitalDetails.length-1].length > 0 && (\r\n                      <>\r\n                      <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>{hospitalDetails[hospitalDetails.length-1].length} Doctors found</Typography>\r\n                    </Box>\r\n                        <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                         {hospitalDetails[hospitalDetails.length-1].map((doctor, index) => (\r\n                        <Box mb={2}>\r\n                          <Doctor key={index} doctor={doctor} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                    </>\r\n\r\n                      )}\r\n                    {hospitalDetails[hospitalDetails.length-1].length == 0 && (\r\n\r\n                      <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>No Doctors found</Typography>\r\n                    </Box>\r\n                      )}\r\n                  \r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n              <AdminAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchHospital\r\n","R:\\CryptoCare\\client\\src\\pages\\admin\\SearchDoctor.jsx",["205","206","207","208","209","210"],"import { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React, { useCallback,useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport CloudUploadRoundedIcon from '@mui/icons-material/CloudUploadRounded'\r\nimport Doctor from '../../components/Doctor'\r\nimport AdminAccess from '../../components/access/adminAccess'\r\n\r\n\r\n\r\n\r\n\r\nconst SearchDoctor = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n  const { setAlert } = useAlert()\r\n\r\n  const [doctorExist, setDoctorExist] = useState(false)\r\n  const [searchDoctorAddress, setSearchDoctorAddress] = useState('')\r\n  const [doctorDetails,setDoctorDetails] = useState([])\r\n  \r\n  \r\n\r\n  const searchDoctor = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(searchDoctorAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      const doctorExists = await contract.methods.getDoctorExists(searchDoctorAddress).call({ from: accounts[0] })\r\n      if (doctorExists) {\r\n        setDoctorExist(true)\r\n    \r\n        \r\n        // setAlert(\"you have access\",\"success\")\r\n        const doctorDetails = await contract.methods.getDoctor(searchDoctorAddress).call({ from: accounts[0] })\r\n        console.log(' details :>> ', doctorDetails)\r\n        setDoctorDetails(doctorDetails)\r\n      }\r\n      else{\r\n        setAlert(\"Doctor not exist, register doctor!\",\"error\")\r\n        // setAccess(false)\r\n\r\n      }\r\n\r\n      \r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n             \r\n              {role === 'admin' && (\r\n                <>\r\n\r\n                  <Typography variant='h4'>Doctor Details</Typography>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Search Hospital by wallet address'\r\n                        value={searchDoctorAddress}\r\n                        onChange={e => setSearchDoctorAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Search'} handleClick={() => {searchDoctor()}}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  {doctorExist && doctorDetails.length === 0 && (\r\n                    <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>No records found</Typography>\r\n                    </Box>\r\n                  )}\r\n\r\n                  {doctorExist && doctorDetails.length > 0 && (\r\n                    <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      \r\n                        <Box mb={2}>\r\n                          <Doctor  doctor={doctorDetails}/>\r\n                        </Box>\r\n                      \r\n                    </Box>\r\n                  )}\r\n                </>\r\n              )}\r\n              <AdminAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchDoctor\r\n","R:\\CryptoCare\\client\\src\\pages\\patient\\ViewRequests.jsx",["211","212","213","214","215","216"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Box, Typography, Backdrop, CircularProgress,RadioGroup, FormControl,FormControlLabel,Radio} from '@mui/material'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport Request from '../../components/Request'\r\nimport PatientAccess from '../../components/access/patientAccess'\r\n\r\n\r\nconst ViewRequests = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const [requests,setRequests] = useState([])\r\n  const [viewRequest,setViewRequest] = useState(false)\r\n\r\n\r\n\r\n    const getRequests = async () => {\r\n      try{\r\n        const requests = await contract.methods.getRequests(accounts[0]).call({ from: accounts[0] })\r\n        // console.log(requests)\r\n        setRequests(requests)\r\n        setViewRequest(true)\r\n        return\r\n      }catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n            <CircularProgress color='inherit' />\r\n          </Backdrop>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              {role === 'patient' && (\r\n                <>\r\n                  <Box mx={2}>\r\n                      <CustomButton text={'See Requests'} handleClick={() => getRequests()}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    {requests.length > 0 && viewRequest && (\r\n                      <>\r\n                         <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      {requests.map((request, index) => (\r\n                        <Box mb={2}>\r\n                          <Request key={index} request={request} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Close Requests'} handleClick={() => setViewRequest(false)}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    </>\r\n\r\n\r\n                      )}\r\n                </>\r\n              )}\r\n              <PatientAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewRequests\r\n","R:\\CryptoCare\\client\\src\\pages\\patient\\ViewEmergencyAccess.jsx",["217","218","219","220","221","222","223"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Box, Typography, Backdrop, CircularProgress,RadioGroup, FormControl,FormControlLabel,Radio} from '@mui/material'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport Emergency from '../../components/Emergency'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport PatientAccess from '../../components/access/patientAccess'\r\n\r\n\r\nconst ViewEmergencyAccess = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const [access,setAccess] = useState([])\r\n  const [viewAccess,setViewAccess] = useState(false)\r\n\r\n  const {setAlert} = useAlert()\r\n\r\n    const getAccess = async () => {\r\n      try{\r\n        const access = await contract.methods.viewEmergencyAccess().call({ from: accounts[0] })\r\n        // console.log(requests)\r\n        setAccess(access)\r\n        setViewAccess(true)\r\n        return\r\n      }catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n            <CircularProgress color='inherit' />\r\n          </Backdrop>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n             \r\n              {role === 'patient' && (\r\n                <>\r\n                  <Box mx={2}>\r\n                      <CustomButton text={'See Access'} handleClick={() => getAccess()}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    {access.length > 0 && viewAccess && (\r\n                      <>\r\n                         <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      {access.map((access, index) => (\r\n                        <Box mb={2}>\r\n                          <Emergency key={index} emergency={access} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Close Requests'} handleClick={() => setViewAccess(false)}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    </>\r\n\r\n\r\n                      )}\r\n                    {access.length == 0 && viewAccess && (\r\n                        setAlert('No access given','error')\r\n                      )}\r\n                \r\n                    \r\n                </>\r\n              )}\r\n              <PatientAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewEmergencyAccess\r\n","R:\\CryptoCare\\client\\src\\pages\\emergencyPerson\\SeeRequests.jsx",["224","225","226","227","228","229","230"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Box, Typography, Backdrop, CircularProgress,RadioGroup, FormControl,FormControlLabel,Radio} from '@mui/material'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport RequestEmergency from '../../components/RequestEmergency'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport EmergencyAccess from '../../components/access/emergencyAccess'\r\n\r\nconst SeeRequests = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const [requests,setRequests] = useState([])\r\n  const [viewRequest,setViewRequest] = useState(false)\r\n\r\n  const {setAlert} = useAlert()\r\n\r\n\r\n\r\n    const getRequests = async () => {\r\n      try{\r\n        const patientId = await contract.methods.getPatientIdEmergency().call({ from: accounts[0] })\r\n        const requests = await contract.methods.getRequestsByEmergency(patientId).call({ from: accounts[0] })\r\n        // console.log(requests)\r\n        setRequests(requests)\r\n        setViewRequest(true)\r\n        return\r\n      }catch(err){\r\n        setAlert(\"You didn't have emergency access\",'error')\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n            <CircularProgress color='inherit' />\r\n          </Backdrop>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              {role === 'emergencyPerson' && (\r\n                <>\r\n                  <Box mx={2}>\r\n                      <CustomButton text={'See Requests'} handleClick={() => getRequests()}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    {requests.length > 0 && viewRequest && (\r\n                      <>\r\n                         <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      {requests.map((request, index) => (\r\n                        <Box mb={2}>\r\n                          <RequestEmergency key={index} requestEmergency={request} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Close Requests'} handleClick={() => setViewRequest(false)}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    </>\r\n\r\n                      )}\r\n                       {requests.length == 0 && viewRequest && (\r\n                        <Box display='flex' justifyContent='center'>\r\n                  <Typography variant='h5'>No requests found</Typography>\r\n                    </Box>\r\n                      )}\r\n                    \r\n\r\n                </>\r\n              )}\r\n              <EmergencyAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SeeRequests\r\n","R:\\CryptoCare\\client\\src\\pages\\patient\\GiveEmergencyAccess.jsx",["231","232","233","234","235","236","237","238","239"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Box, Typography, Backdrop, CircularProgress,RadioGroup, FormControl,FormControlLabel,Radio,TextField} from '@mui/material'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport validator from 'validator'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport PatientAccess from '../../components/access/patientAccess'\r\n\r\n\r\n\r\n\r\nconst GiveEmergencyAccess = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const {setAlert} = useAlert()\r\n\r\n  const [personAddress,setPersonAddress] = useState('')\r\n  const [personName,setPersonName] = useState('')\r\n  const [personRelation,setPersonRelation] = useState('')\r\n  const [personContact,setPersonContact] = useState('')\r\n  const [personLocation,setPersonLocation] = useState('')\r\n\r\n\r\n    const addAccess = async () => {\r\n      try{\r\n         if (!/^(0x)?[0-9a-f]{40}$/i.test(personAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      if(personName == \"\"){\r\n        setAlert(\"Enter valid name\",'error')\r\n        return\r\n      }\r\n      if(personRelation == \"\"){\r\n        setAlert(\"Enter valid relation\",'error')\r\n        return\r\n      }\r\n       if(!validator.isMobilePhone(personContact)){\r\n        setAlert(\"Enter valid mobile number\",'error')\r\n        return\r\n      }\r\n      if(personLocation == \"\"){\r\n        setAlert(\"Enter valid location\",'error')\r\n        return\r\n      }\r\n     \r\n\r\n        await contract.methods.addEmergencyAccess(personAddress,personName,personRelation,personContact,personLocation,true).send({ from: accounts[0] })\r\n        // console.log(requests)\r\n        setAlert(\"Emergency person added successfully\",'success')\r\n        return\r\n      }catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n            <CircularProgress color='inherit' />\r\n          </Backdrop>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              {role === 'patient' && (\r\n                <>\r\n\r\n                  <Typography variant='h4'>Add Emergency Person</Typography>\r\n\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter person address'\r\n                        value={personAddress}\r\n                        onChange={e => setPersonAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter parson name'\r\n                        value={personName}\r\n                        onChange={e => setPersonName(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter person relation'\r\n                        value={personRelation}\r\n                        onChange={e => setPersonRelation(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                 \r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter person mobile number'\r\n                        value={personContact}\r\n                        onChange={e => setPersonContact(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <textarea\r\n                        rows=\"8\"\r\n                        cols=\"50\"\r\n                        placeholder='Enter patient location'\r\n                        value={personLocation}\r\n                        onChange={e => setPersonLocation(e.target.value)}\r\n                      ></textarea>\r\n                    </FormControl>\r\n                    </Box>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Add Access'} handleClick={() => addAccess()}>\r\n                        <PersonAddAlt1RoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>   \r\n                </>\r\n              )}\r\n              <PatientAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GiveEmergencyAccess\r\n","R:\\CryptoCare\\client\\src\\components\\layouts\\AlertPopup.jsx",[],"R:\\CryptoCare\\client\\src\\components\\layouts\\Layout.jsx",[],"R:\\CryptoCare\\client\\src\\contexts\\EthContext\\EthContext.js",[],"R:\\CryptoCare\\client\\src\\contexts\\EthContext\\useEth.js",[],"R:\\CryptoCare\\client\\src\\contexts\\EthContext\\state.js",[],"R:\\CryptoCare\\client\\src\\pages\\doctor\\index.jsx",["240","241","242","243"],"import { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React, { useCallback,useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport AddRecordModal from './AddRecordModal'\r\nimport CloudUploadRoundedIcon from '@mui/icons-material/CloudUploadRounded'\r\nimport ipfs from '../../ipfs'\r\nimport Record from '../../components/Record'\r\nimport CryptoJS from \"crypto-js\";\r\nimport Patient from '../../components/Patient'\r\nimport DoctorAccess from '../../components/access/doctorAccess'\r\n\r\n\r\n\r\n\r\nconst Doctor = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n  const { setAlert } = useAlert()\r\n\r\n  const [patientExist, setPatientExist] = useState(false)\r\n  const [searchPatientAddress, setSearchPatientAddress] = useState('')\r\n  const [records, setRecords] = useState([])\r\n  const [addRecord, setAddRecord] = useState(false)\r\n  const [requestPatientAddress,setRequestPatientAddress] = useState('')\r\n  const [access,setAccess] = useState(false)\r\n  const [details,setDetails] = useState([])\r\n\r\n\r\n  \r\n\r\n  const searchPatient = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(searchPatientAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      const patientExists = await contract.methods.getPatientExists(searchPatientAddress).call({ from: accounts[0] })\r\n      if (patientExists) {\r\n        setPatientExist(true)\r\n        const access = await contract.methods.verifyAccess(searchPatientAddress,accounts[0]).call({ from: accounts[0] })\r\n        setAccess(access)\r\n        if(access){\r\n        // setAlert(\"you have access\",\"success\")\r\n        const details = await contract.methods.getPatient(searchPatientAddress).call({ from: accounts[0] })\r\n        console.log(details)\r\n        setDetails(details)\r\n        const records = await contract.methods.getRecordsDoctor(searchPatientAddress).call({ from: accounts[0] })\r\n        console.log('records :>> ', records)\r\n        setRecords(records)\r\n      }\r\n      else{\r\n        setAlert(\"Access Denied, request patient!\",\"error\")\r\n        // setAccess(false)\r\n\r\n      }\r\n\r\n      }\r\n       else if(!patientExists) {\r\n        setAlert('Patient does not exist', 'error')\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  const getRequestAccess = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(requestPatientAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      const patientExists = await contract.methods.getPatientExists(requestPatientAddress).call({ from: accounts[0] })\r\n      // console.log(requestPatientAddress)\r\n      if(patientExists){\r\n        try{\r\n        await contract.methods.requestAccess(requestPatientAddress).send({ from : accounts[0] })\r\n        setAlert('request sent successfully!','success')\r\n      }catch(err){\r\n        setAlert(\"request already sent!\",'error')\r\n        console.error(err)\r\n      }\r\n      \r\n    }\r\n    else{\r\n      setAlert(\"patient does not exist!\",\"error\")\r\n    }\r\n  }\r\n    catch(err){\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  const addRecordCallback = useCallback(\r\n    async (buffer, fileName, patientAddress) => {\r\n      if (!patientAddress) {\r\n        setAlert('Please search for a patient first', 'error')\r\n        return\r\n      }\r\n      try {\r\n        const key = \"oiewrhg5623475vbeihc39873948^&%E@ZfytfE#&@^ tf1wufhx231277!*YE2\"\r\n        const res = await ipfs.add(buffer)\r\n        const ipfsHashValue = res[0].hash\r\n        const ipfsBytes = CryptoJS.enc.Utf8.parse(ipfsHashValue);\r\n        var ipfsHash = CryptoJS.AES.encrypt(ipfsBytes, key).toString();        // Encryption: I: WordArray -> O: -> Base64 encoded string (OpenSSL)\r\n        // console.log(ipfsHash)\r\n        // console.log(ipfsHashValue)\r\n       \r\n\r\n        if (ipfsHash) {\r\n          await contract.methods.addRecord(ipfsHash, fileName, patientAddress).send({ from: accounts[0] })\r\n          setAlert('New record uploaded', 'success')\r\n          setAddRecord(true)\r\n\r\n          // refresh records\r\n          const records = await contract.methods.getRecordsDoctor(patientAddress).call({ from: accounts[0] })\r\n          setRecords(records)\r\n        }\r\n        \r\n      } catch (err) {\r\n        setAlert('Record upload failed', 'error')\r\n        console.error(err)\r\n      }\r\n    },\r\n    [searchPatientAddress, accounts, contract]\r\n  )\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              {role === 'doctor' && (\r\n                <>\r\n                  <Modal open={addRecord} onClose={() => setAddRecord(false)}>\r\n                    <AddRecordModal\r\n                      handleClose={() => setAddRecord(false)}\r\n                      handleUpload={addRecordCallback}\r\n                      patientAddress={searchPatientAddress}\r\n                    />\r\n                  </Modal>\r\n\r\n                  <Typography variant='h4'>Patient Records</Typography>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Search patient by wallet address'\r\n                        value={searchPatientAddress}\r\n                        onChange={e => setSearchPatientAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Search'} handleClick={() => {searchPatient()}}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    {access && (\r\n                    <CustomButton text={'New Record'} handleClick={() => setAddRecord(true)} disabled={!patientExist}>\r\n                      <CloudUploadRoundedIcon style={{ color: 'white' }} />\r\n                    </CustomButton>\r\n                    )\r\n                  }\r\n                  </Box>\r\n\r\n                  {patientExist && !access && (\r\n                    <>\r\n                     <Typography variant='h4'>Request Access</Typography>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter Patient Address to request'\r\n                        value={requestPatientAddress}\r\n                        onChange={e => setRequestPatientAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Request'} handleClick={() => getRequestAccess()}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    </Box>\r\n                    </>\r\n\r\n                    )}\r\n                  {patientExist && access && (\r\n                     <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                        <Box mb={2}>\r\n                          <Patient patient={details} />\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    )}\r\n\r\n                  {patientExist && records.length === 0 && access && (\r\n                    <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>No records found</Typography>\r\n                    </Box>\r\n                  )}\r\n\r\n                  {patientExist && records.length > 0 && access && (\r\n                    <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      {records.map((record, index) => (\r\n                        <Box mb={2}>\r\n                          <Record key={index} record={record} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                  )}\r\n                </>\r\n              )}\r\n              <DoctorAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Doctor\r\n","R:\\CryptoCare\\client\\src\\pages\\patient\\index.jsx",["244","245","246","247","248","249","250"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Box, Typography, Backdrop, CircularProgress,RadioGroup, FormControl,FormControlLabel,Radio} from '@mui/material'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport Record from '../../components/Record'\r\nimport PatientAccess from '../../components/access/patientAccess'\r\n\r\n\r\n\r\nconst Patient = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const [records, setRecords] = useState([])\r\n  const [loadingRecords, setLoadingRecords] = useState(true)\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const getRecords = async () => {\r\n      try {\r\n        const records = await contract.methods.getRecords(accounts[0]).call({ from: accounts[0] })\r\n        // console.log(records)\r\n        setRecords(records)\r\n        setLoadingRecords(false)\r\n      } catch (err) {\r\n        console.error(err)\r\n        setLoadingRecords(true)\r\n      }\r\n    }\r\n\r\n      \r\n    getRecords()\r\n    \r\n    \r\n  })\r\n\r\n\r\n  if (loading || loadingRecords) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n            <CircularProgress color='inherit' />\r\n          </Backdrop>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              \r\n              {role === 'patient' && (\r\n                <>\r\n                  <Typography variant='h4'>My Records</Typography>\r\n\r\n                  {records.length === 0 && (\r\n                    <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>No records found</Typography>\r\n                    </Box>\r\n                  )}\r\n\r\n                  {records.length > 0 && (\r\n                    <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      {records.map((record, index) => (\r\n                        <Box mb={2}>\r\n                          <Record key={index} record={record} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                  )}\r\n                </>\r\n              )}\r\n              <PatientAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Patient\r\n","R:\\CryptoCare\\client\\src\\pages\\index.jsx",["251","252","253"],"import { Box, FormControl, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React from 'react'\r\nimport VideoCover from 'react-video-cover'\r\nimport BackgroundVideo from '../assets/BackgroundVideo.mp4'\r\nimport logo from '../assets/CryptoCare.png'\r\nimport useEth from '../contexts/EthContext/useEth'\r\nimport CustomButton from '../components/CustomButton'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport LoginRoundedIcon from '@mui/icons-material/LoginRounded'\r\nimport '../App.css'\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nfunction ResponsiveDialog() {\r\n  const [open, setOpen] = React.useState(true);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant=\"contained\" onClick={handleClickOpen}>\r\n        View Information\r\n      </Button>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle sx={{fontSize:20}} id=\"responsive-dialog-title\">\r\n          {\"Want to use Med-Block?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText sx={{ fontSize:15}}>\r\n            You're not recognised as a authorized person for this system, Please contact respective person to learn more.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} autoFocus>\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst Home = () => {\r\n\r\n  const {\r\n    state: { role, loading, accounts },\r\n    dispatch,\r\n  } = useEth()\r\n\r\n  const navigate = useNavigate()\r\n\r\n\r\n  const ActionSection = () => {\r\n    if (!accounts) {\r\n      return (\r\n        <Typography variant='h5' color='white'>\r\n          Open your MetaMask wallet to get connected, then refresh this page\r\n        </Typography>\r\n      )\r\n    } else {\r\n      if (role === 'admin') {\r\n        return (\r\n          <CustomButton text='Admin Portal' handleClick={() => navigate('/admin')}>\r\n            <LoginRoundedIcon style={{ color: 'white' }} />\r\n          </CustomButton>\r\n        )\r\n      } else if (role === 'patient') {\r\n        return (\r\n          <CustomButton text='Patient Portal' handleClick={() => navigate('/patient')}>\r\n            <LoginRoundedIcon style={{ color: 'white' }} />\r\n          </CustomButton>\r\n        )\r\n      } else if (role === 'doctor') {\r\n        return (\r\n          <CustomButton text='Doctor Portal' handleClick={() => navigate('/doctor')}>\r\n            <LoginRoundedIcon style={{ color: 'white' }} />\r\n          </CustomButton>\r\n        )\r\n      }else if (role === 'emergencyPerson') {\r\n        return (\r\n          <CustomButton text='Emergency Portal' handleClick={() => navigate('/emergencyPerson/seeRequests')}>\r\n            <LoginRoundedIcon style={{ color: 'white' }} />\r\n          </CustomButton>\r\n        )\r\n      }else{\r\n        return (\r\n          <>\r\n          {(\r\n            ResponsiveDialog()\r\n\r\n          )}\r\n            </>\r\n        )\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box\r\n        display='flex'\r\n        flexDirection='column'\r\n        justifyContent='center'\r\n        alignItems='center'\r\n        width='100vw'\r\n        height='100vh'\r\n        id='background'\r\n      >\r\n        <Box\r\n          style={{\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n            top: 0,\r\n            left: 0,\r\n            zIndex: -1,\r\n          }}\r\n        >\r\n          <VideoCover\r\n            videoOptions={{\r\n              src: BackgroundVideo,\r\n              autoPlay: true,\r\n              loop: true,\r\n              muted: true,\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box id='home-page-box' display='flex' flexDirection='column' justifyContent='center' alignItems='center' p={3}>\r\n          <img src={logo} alt='med-chain-logo' style={{ height: 250 }} />\r\n          <Box mt={2} mb={5}>\r\n            <Typography variant='h4' color='white'>\r\n              Own Your Health\r\n            </Typography>\r\n          </Box>\r\n          <ActionSection />\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n","R:\\CryptoCare\\client\\src\\pages\\admin\\index.jsx",["254","255","256","257","258"],"import { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React from 'react'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport { useState } from 'react'\r\nimport '../../App.css'\r\nimport validator from 'validator'\r\nimport AdminAccess from '../../components/access/adminAccess'\r\n\r\nconst Admin = () => {\r\nconst [doctorAddress,setDoctorAddress] = useState('')\r\nconst [hospitalAddress,setHospitalAddress] = useState('')\r\nconst [doctorName,setDoctorName] = useState('')\r\nconst [doctorEmail,setDoctorEmail] = useState('')\r\nconst [doctorContact,setDoctorContact] = useState('')\r\nconst [doctorWork,setDoctorWork] = useState('')\r\n\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n    dispatch,\r\n  } = useEth()\r\n\r\n  const {setAlert} = useAlert()\r\n  const navigate = useNavigate()\r\n\r\n  const registerDoctor = async () => {\r\n    try {\r\n       if (!/^(0x)?[0-9a-f]{40}$/i.test(doctorAddress)) {\r\n        setAlert('Please enter a valid doctor address', 'error')\r\n        return\r\n      }\r\n       if (!/^(0x)?[0-9a-f]{40}$/i.test(hospitalAddress)) {\r\n        setAlert('Please enter a valid hospital address', 'error')\r\n        return\r\n      }\r\n      if(doctorName == \"\"){\r\n        setAlert('Please enter valid doctor name','error')\r\n        return\r\n      }\r\n        if(!validator.isEmail(doctorEmail)){\r\n        setAlert(\"Please enter valid doctor email\",'error')\r\n        return\r\n      }\r\n      if(!validator.isMobilePhone(doctorContact,'en-IN')){\r\n        setAlert(\"Please enter valid doctor mobile no\",'error')\r\n        return\r\n      }\r\n    \r\n      if(doctorWork == \"\"){\r\n        setAlert(\"Please enter valid doctor work\",'error')\r\n        return\r\n      }\r\n\r\n      await contract.methods.addDoctor(doctorAddress,hospitalAddress,doctorName,doctorEmail,doctorContact,doctorWork).send({ from: accounts[0] })\r\n      setAlert('Doctor Added Successfully!','success')\r\n      dispatch({\r\n        type: 'ADD_DOCTOR',\r\n      })\r\n    } catch (err) {\r\n      setAlert(\"transaction failed!\",'error')\r\n      console.error(err)\r\n    }\r\n  }\r\n   if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  }\r\n  else{\r\n\r\n   return (\r\n    <>\r\n      {role === 'admin' && (\r\n          <div className='register-doctor'>\r\n          <Box display='flex' flexDirection='column' alignItems='center'>\r\n            {/*<Box mb={2}>*/}\r\n              <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Register Doctor by wallet address'\r\n                        value={doctorAddress}\r\n                        onChange={e => setDoctorAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter hospital address'\r\n                        value={hospitalAddress}\r\n                        onChange={e => setHospitalAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter Doctor Name'\r\n                        value={doctorName}\r\n                        onChange={e => setDoctorName(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter Doctor Email'\r\n                        value={doctorEmail}\r\n                        onChange={e => setDoctorEmail(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter Doctor Mobile Number'\r\n                        value={doctorContact}\r\n                        onChange={e => setDoctorContact(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        color='secondary'\r\n                        variant='outlined'\r\n                        placeholder='Enter Doctor Role'\r\n                        value={doctorWork}\r\n                        onChange={e => setDoctorWork(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px'} }}\r\n                        InputLabelProps={{ style: { fontSize: '15px'} }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                  </Box>\r\n              <CustomButton text='Doctor Register' handleClick={() => registerDoctor()}>\r\n                <PersonAddAlt1RoundedIcon style={{ color: 'white' }} />\r\n              </CustomButton>\r\n            {/*</Box>*/}\r\n            <Typography variant='h5' color='black'>\r\n              If you are a patient, ask your doctor to register for you\r\n            </Typography>\r\n          </Box>\r\n          </div> \r\n\r\n        )}\r\n              <AdminAccess role={role}/>\r\n     \r\n          </>\r\n        )\r\n}\r\n\r\n}\r\n\r\nexport default Admin","R:\\CryptoCare\\client\\src\\pages\\unknown\\index.jsx",["259","260"],"import useEth from '../../contexts/EthContext/useEth'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Unknown = () => {\r\n\tconst {\r\n    state: { role, loading, accounts },\r\n    dispatch,\r\n  } = useEth()\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const ActionSection = () => {\r\n    if (!accounts) {\r\n      return (\r\n       \r\n          <h1>Open your MetaMask wallet to get connected, then refresh this page</h1>\r\n        \r\n      )\r\n    } else {\r\n      if (role === 'admin') {\r\n      \treturn( navigate('/admin'))\r\n       \r\n      } else if (role === 'patient') {\r\n      \treturn( navigate('/patient'))\r\n       \r\n      } else if (role === 'doctor') {\r\n      \treturn(navigate('/doctor'))\r\n       \t\r\n      }else if (role === 'emergencyPerson') {\r\n        return(navigate('/emergencyPerson/seeRequests'))\r\n        \r\n      }else{\r\n        return (\r\n            <h1>Unknown</h1>\r\n        )\r\n      }\r\n\r\n    }\r\n  }\r\n\treturn (\r\n\t\t<>\r\n\t\t<ActionSection/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Unknown;","R:\\CryptoCare\\client\\src\\contexts\\EthContext\\EthProvider.jsx",[],"R:\\CryptoCare\\client\\src\\contexts\\AlertContext\\useAlert.js",[],"R:\\CryptoCare\\client\\src\\components\\CustomButton.jsx",["261","262"],"import React from 'react'\r\nimport { Box, Button, Typography } from '@mui/material'\r\nimport { grey, teal } from '@mui/material/colors'\r\n\r\nconst CustomButton = ({ text, handleClick, disabled = false, children }) => {\r\n  return (\r\n    <Button\r\n      startIcon={children}\r\n      style={{\r\n        backgroundColor: disabled ? grey[400] : '#061d60',\r\n        \r\n        textTransform: 'none',\r\n        padding: '10px 20px',\r\n      }}\r\n      onClick={handleClick}\r\n      disabled={disabled}\r\n    >\r\n      <Typography variant='h5' color='white'>\r\n        {text}\r\n      </Typography>\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CustomButton\r\n","R:\\CryptoCare\\client\\src\\components\\Hospital.jsx",["263","264"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport useAlert from '../contexts/AlertContext/useAlert'\r\n\r\n\r\n\r\n\r\nconst Hospital = ({ hospital }) => {\r\n  const [hospitalId,hospitalName,hospitalContact,hospitalDoctors] = hospital\r\n\r\n\r\n  const {setAlert} = useAlert()\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n   \r\n      <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Hospital ID\r\n              </Typography>\r\n              <Typography variant='h6'>{hospitalId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                hospital Name\r\n              </Typography>\r\n              <Typography variant='h6'>{hospitalName}</Typography>\r\n            </Box>\r\n          </Grid>\r\n            <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                hospital Contact\r\n              </Typography>\r\n              <Typography variant='h6'>{hospitalContact}</Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n   \r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Hospital\r\n","R:\\CryptoCare\\client\\src\\components\\Doctor.jsx",["265"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport useAlert from '../contexts/AlertContext/useAlert'\r\n\r\n\r\n\r\n\r\nconst Doctor = ({ doctor }) => {\r\n  const [doctorId,hospitalId,doctorName,doctorEmail,doctorContact,doctorWork] = doctor\r\n\r\n\r\n  const {setAlert} = useAlert()\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n   \r\n      <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Doctor Id\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Hospital ID\r\n              </Typography>\r\n              <Typography variant='h6'>{hospitalId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Doctor Name\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorName}</Typography>\r\n            </Box>\r\n          </Grid>\r\n            <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Doctor Email\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorEmail}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Doctor Contact\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorContact}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Doctor Role\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorWork}</Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n   \r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Doctor\r\n","R:\\CryptoCare\\client\\src\\components\\RequestEmergency.jsx",["266","267"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport Button from '@mui/material/Button';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Stack from '@mui/material/Stack';\r\nimport useEth from '../contexts/EthContext/useEth'\r\nimport useAlert from '../contexts/AlertContext/useAlert'\r\n\r\n\r\n\r\n\r\nconst RequestEmergency = ({ requestEmergency }) => {\r\n  const [access,doctorId] = requestEmergency\r\n\r\n   const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const {setAlert} = useAlert()\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n  const givePermission = async (doctorId,access) => {\r\n    try{\r\n      await contract.methods.giveEmergencyAccess(doctorId,access).send({ from: accounts[0] })\r\n      if(access){\r\n        setAlert(\"request granted\",\"success\")\r\n      }\r\n      else{\r\n        setAlert(\"request rejected\",\"error\")\r\n      }\r\n\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n \r\n \r\n\r\n\r\n  return (\r\n    <>\r\n   \r\n      <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Request From\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Access\r\n              </Typography>\r\n              <Typography variant='h6'>{access.toString()}</Typography>\r\n            </Box>\r\n          </Grid>\r\n            <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Access\r\n              </Typography>\r\n               <Box mx={2} display='flex' flexDirection='row'>\r\n                      <Stack direction=\"row\" spacing={2}>\r\n      <Button variant=\"contained\" color='error' value={doctorId} startIcon={<DeleteIcon />} onClick={(e) => givePermission(e.target.value,false)}>\r\n        Reject\r\n      </Button>\r\n      <Button variant=\"contained\" color='success' value={doctorId} endIcon={<SendIcon />} onClick={(e) => givePermission(e.target.value,true)}>\r\n        Accept\r\n      </Button>\r\n    </Stack>\r\n                </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n   \r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default RequestEmergency\r\n","R:\\CryptoCare\\client\\src\\components\\Emergency.jsx",["268","269"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport Button from '@mui/material/Button';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Stack from '@mui/material/Stack';\r\nimport useEth from '../contexts/EthContext/useEth'\r\nimport useAlert from '../contexts/AlertContext/useAlert'\r\n\r\n\r\n\r\n\r\nconst Emergency = ({ emergency }) => {\r\n  const [personId,patientId,personName,personRelation,personContact,personLocation,access] = emergency\r\n\r\n   const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const {setAlert} = useAlert()\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n  const giveAccess = async (personId,access) => {\r\n    try{\r\n      await contract.methods.manageEmergencyAccess(personId,access).send({ from: accounts[0] })\r\n      if(access){\r\n        setAlert(\"access granted\",\"success\")\r\n      }\r\n      else{\r\n        setAlert(\"access rejected\",\"error\")\r\n      }\r\n\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n \r\n \r\n\r\n\r\n  return (\r\n    <>\r\n   \r\n      <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Person ID\r\n              </Typography>\r\n              <Typography variant='h6'>{personId}</Typography>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient ID\r\n              </Typography>\r\n              <Typography variant='h6'>{patientId}</Typography>\r\n               <Typography variant='h6' color={grey[600]}>\r\n                Person Name\r\n              </Typography>\r\n              <Typography variant='h6'>{personName}</Typography>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Relation\r\n              </Typography>\r\n              <Typography variant='h6'>{personRelation}</Typography>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Person Contact\r\n              </Typography>\r\n              <Typography variant='h6'>{personContact}</Typography>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Person Location\r\n              </Typography>\r\n              <Typography variant='h6'>{personLocation}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Access\r\n              </Typography>\r\n              <Typography variant='h6'>{access.toString()}</Typography>\r\n            </Box>\r\n          </Grid>\r\n            <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Access\r\n              </Typography>\r\n               <Box mx={2} display='flex' flexDirection='row'>\r\n                      <Stack direction=\"row\" spacing={2}>\r\n      <Button variant=\"contained\" color='error' value={personId} startIcon={<DeleteIcon />} onClick={(e) => giveAccess(e.target.value,false)}>\r\n        Reject\r\n      </Button>\r\n      <Button variant=\"contained\" color='success' value={personId} endIcon={<SendIcon />} onClick={(e) => giveAccess(e.target.value,true)}>\r\n        Accept\r\n      </Button>\r\n    </Stack>\r\n                </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n   \r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Emergency\r\n","R:\\CryptoCare\\client\\src\\components\\Request.jsx",["270","271"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport Button from '@mui/material/Button';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Stack from '@mui/material/Stack';\r\nimport useEth from '../contexts/EthContext/useEth'\r\nimport useAlert from '../contexts/AlertContext/useAlert'\r\n\r\n\r\n\r\n\r\nconst Request = ({ request }) => {\r\n  const [access,doctorId] = request\r\n\r\n   const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n\r\n  const {setAlert} = useAlert()\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n  const givePermission = async (doctorId,access) => {\r\n    try{\r\n      await contract.methods.grantAccess(doctorId,access).send({ from: accounts[0] })\r\n      if(access){\r\n        setAlert(\"request granted\",\"success\")\r\n      }\r\n      else{\r\n        setAlert(\"request rejected\",\"error\")\r\n      }\r\n\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n \r\n \r\n\r\n\r\n  return (\r\n    <>\r\n   \r\n      <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Request From\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Access\r\n              </Typography>\r\n              <Typography variant='h6'>{access.toString()}</Typography>\r\n            </Box>\r\n          </Grid>\r\n            <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Access\r\n              </Typography>\r\n               <Box mx={2} display='flex' flexDirection='row'>\r\n                      <Stack direction=\"row\" spacing={2}>\r\n      <Button variant=\"contained\" color='error' value={doctorId} startIcon={<DeleteIcon />} onClick={(e) => givePermission(e.target.value,false)}>\r\n        Reject\r\n      </Button>\r\n      <Button variant=\"contained\" color='success' value={doctorId} endIcon={<SendIcon />} onClick={(e) => givePermission(e.target.value,true)}>\r\n        Accept\r\n      </Button>\r\n    </Stack>\r\n                </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n   \r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Request\r\n","R:\\CryptoCare\\client\\src\\components\\access\\adminAccess.jsx",[],"R:\\CryptoCare\\client\\src\\components\\access\\patientAccess.jsx",[],"R:\\CryptoCare\\client\\src\\components\\access\\emergencyAccess.jsx",[],"R:\\CryptoCare\\client\\src\\components\\access\\doctorAccess.jsx",[],"R:\\CryptoCare\\client\\src\\ipfs.js",[],"R:\\CryptoCare\\client\\src\\components\\Record.jsx",["272"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport moment from 'moment'\r\nimport CloudDownloadRoundedIcon from '@mui/icons-material/CloudDownloadRounded'\r\nimport CryptoJS from \"crypto-js\";\r\nimport CustomButton from './CustomButton'\r\n\r\n\r\n\r\n\r\nconst Record = ({ record }) => {\r\n  const [cid, name, patientId, doctorId, timestamp] = record\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n  function convertWordArrayToUint8Array(wordArray) {\r\n    var arrayOfWords = wordArray.hasOwnProperty(\"words\") ? wordArray.words : [];\r\n    var length = wordArray.hasOwnProperty(\"sigBytes\") ? wordArray.sigBytes : arrayOfWords.length * 4;\r\n    var uInt8Array = new Uint8Array(length), index=0, word, i;\r\n    for (i=0; i<length; i++) {\r\n        word = arrayOfWords[i];\r\n        uInt8Array[index++] = word >> 24;\r\n        uInt8Array[index++] = (word >> 16) & 0xff;\r\n        uInt8Array[index++] = (word >> 8) & 0xff;\r\n        uInt8Array[index++] = word & 0xff;\r\n    }\r\n    return uInt8Array;\r\n}\r\n\r\n\r\n const fetchData = async () => {\r\n      try {\r\n        const keyCID = \"oiewrhg5623475vbeihc39873948^&%E@ZfytfE#&@^ tf1wufhx231277!*YE2\"\r\n       const decryptedBytes = CryptoJS.AES.decrypt(cid, keyCID);\r\n        const decryptedCID = decryptedBytes.toString(CryptoJS.enc.Utf8);              // Decryption: I: Base64 encoded string (OpenSSL-format) -> O: WordArray\r\n        const response = await fetch(`https://med-chain.infura-ipfs.io/ipfs/${decryptedCID}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n          const key = \"askfalq234234123kl4jlkfjalkdsfjq4j!@#LK%Ds#\";\r\n         const textData = await response.text()\r\n       var decrypted = CryptoJS.AES.decrypt(textData, key);               // Decryption: I: Base64 encoded string (OpenSSL-format) -> O: WordArray\r\n        var typedArray = convertWordArrayToUint8Array(decrypted);               // Convert: WordArray -> typed array\r\n\r\n        var fileDec = new Blob([typedArray]);\r\n\r\n        var a = document.createElement(\"a\");\r\n        var url = window.URL.createObjectURL(fileDec);\r\n        var filename = name;\r\n        a.href = url;\r\n        a.download = filename;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n\r\n        \r\n        console.log(response)\r\n\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Record name\r\n              </Typography>\r\n              <Typography variant='h6'>{name}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Doctor\r\n              </Typography>\r\n              <Typography variant='h6'>{doctorId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Created time\r\n              </Typography>\r\n              <Typography variant='h6'>{moment.unix(timestamp).format('MM-DD-YYYY HH:mm')}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <CustomButton handleClick={() => fetchData()}>\r\n                      <CloudDownloadRoundedIcon style={{ color: 'white' }} />\r\n            </CustomButton>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\n\r\nexport default Record\r\n","R:\\CryptoCare\\client\\src\\pages\\doctor\\AddRecordModal.jsx",[],"R:\\CryptoCare\\client\\src\\components\\Patient.jsx",["273"],"import { Card, CardContent, Typography, Grid, Box } from '@mui/material'\r\nimport React from 'react'\r\nimport DescriptionRoundedIcon from '@mui/icons-material/DescriptionRounded'\r\nimport { grey } from '@mui/material/colors'\r\nimport useAlert from '../contexts/AlertContext/useAlert'\r\n\r\n\r\n\r\n\r\nconst Patient = ({ patient }) => {\r\n  const [patientId,patientName,patientAge,patientGender,patientContact,patientLocation,patientCause] = patient\r\n\r\n\r\n\r\n  const {setAlert} = useAlert()\r\n  // const [b64,setb64] = useState(\"\")\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n   \r\n      <Card>\r\n      <CardContent>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={1}>\r\n            <DescriptionRoundedIcon style={{ fontSize: 40, color: grey[700] }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Id\r\n              </Typography>\r\n              <Typography variant='h6'>{patientId}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Name\r\n              </Typography>\r\n              <Typography variant='h6'>{patientName}</Typography>\r\n            </Box>\r\n          </Grid>\r\n            <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Age\r\n              </Typography>\r\n              <Typography variant='h6'>{patientAge}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Gender\r\n              </Typography>\r\n              <Typography variant='h6'>{patientGender}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Contact\r\n              </Typography>\r\n              <Typography variant='h6'>{patientContact}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Location\r\n              </Typography>\r\n              <Typography variant='h6'>{patientLocation}</Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Box display='flex' flexDirection='column'>\r\n              <Typography variant='h6' color={grey[600]}>\r\n                Patient Problem\r\n              </Typography>\r\n              <Typography variant='h6'>{patientCause}</Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n   \r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Patient\r\n",{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":2,"column":8,"nodeType":"280","messageId":"281","endLine":2,"endColumn":14},{"ruleId":"278","severity":1,"message":"282","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":22},{"ruleId":"283","severity":1,"message":"284","line":39,"column":25,"nodeType":"285","messageId":"286","endLine":39,"endColumn":27},{"ruleId":"283","severity":1,"message":"284","line":43,"column":24,"nodeType":"285","messageId":"286","endLine":43,"endColumn":26},{"ruleId":"283","severity":1,"message":"284","line":47,"column":27,"nodeType":"285","messageId":"286","endLine":47,"endColumn":29},{"ruleId":"283","severity":1,"message":"284","line":55,"column":29,"nodeType":"285","messageId":"286","endLine":55,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":58,"column":27,"nodeType":"285","messageId":"286","endLine":58,"endColumn":29},{"ruleId":"278","severity":1,"message":"282","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":22},{"ruleId":"278","severity":1,"message":"287","line":1,"column":37,"nodeType":"280","messageId":"281","endLine":1,"endColumn":42},{"ruleId":"278","severity":1,"message":"288","line":25,"column":9,"nodeType":"280","messageId":"281","endLine":25,"endColumn":17},{"ruleId":"283","severity":1,"message":"284","line":34,"column":23,"nodeType":"285","messageId":"286","endLine":34,"endColumn":25},{"ruleId":"278","severity":1,"message":"282","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":22},{"ruleId":"278","severity":1,"message":"287","line":1,"column":37,"nodeType":"280","messageId":"281","endLine":1,"endColumn":42},{"ruleId":"278","severity":1,"message":"289","line":2,"column":17,"nodeType":"280","messageId":"281","endLine":2,"endColumn":28},{"ruleId":"278","severity":1,"message":"290","line":2,"column":29,"nodeType":"280","messageId":"281","endLine":2,"endColumn":39},{"ruleId":"278","severity":1,"message":"291","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":32},{"ruleId":"278","severity":1,"message":"292","line":9,"column":8,"nodeType":"280","messageId":"281","endLine":9,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":127,"column":71,"nodeType":"285","messageId":"286","endLine":127,"endColumn":73},{"ruleId":"278","severity":1,"message":"282","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":22},{"ruleId":"278","severity":1,"message":"287","line":1,"column":37,"nodeType":"280","messageId":"281","endLine":1,"endColumn":42},{"ruleId":"278","severity":1,"message":"289","line":2,"column":17,"nodeType":"280","messageId":"281","endLine":2,"endColumn":28},{"ruleId":"278","severity":1,"message":"290","line":2,"column":29,"nodeType":"280","messageId":"281","endLine":2,"endColumn":39},{"ruleId":"278","severity":1,"message":"291","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":32},{"ruleId":"278","severity":1,"message":"292","line":9,"column":8,"nodeType":"280","messageId":"281","endLine":9,"endColumn":30},{"ruleId":"278","severity":1,"message":"293","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":48},{"ruleId":"278","severity":1,"message":"294","line":2,"column":54,"nodeType":"280","messageId":"281","endLine":2,"endColumn":64},{"ruleId":"278","severity":1,"message":"295","line":2,"column":66,"nodeType":"280","messageId":"281","endLine":2,"endColumn":77},{"ruleId":"278","severity":1,"message":"296","line":2,"column":78,"nodeType":"280","messageId":"281","endLine":2,"endColumn":94},{"ruleId":"278","severity":1,"message":"297","line":2,"column":95,"nodeType":"280","messageId":"281","endLine":2,"endColumn":100},{"ruleId":"278","severity":1,"message":"293","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":48},{"ruleId":"278","severity":1,"message":"294","line":2,"column":54,"nodeType":"280","messageId":"281","endLine":2,"endColumn":64},{"ruleId":"278","severity":1,"message":"295","line":2,"column":66,"nodeType":"280","messageId":"281","endLine":2,"endColumn":77},{"ruleId":"278","severity":1,"message":"296","line":2,"column":78,"nodeType":"280","messageId":"281","endLine":2,"endColumn":94},{"ruleId":"278","severity":1,"message":"297","line":2,"column":95,"nodeType":"280","messageId":"281","endLine":2,"endColumn":100},{"ruleId":"283","severity":1,"message":"284","line":79,"column":36,"nodeType":"285","messageId":"286","endLine":79,"endColumn":38},{"ruleId":"278","severity":1,"message":"293","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":48},{"ruleId":"278","severity":1,"message":"294","line":2,"column":54,"nodeType":"280","messageId":"281","endLine":2,"endColumn":64},{"ruleId":"278","severity":1,"message":"295","line":2,"column":66,"nodeType":"280","messageId":"281","endLine":2,"endColumn":77},{"ruleId":"278","severity":1,"message":"296","line":2,"column":78,"nodeType":"280","messageId":"281","endLine":2,"endColumn":94},{"ruleId":"278","severity":1,"message":"297","line":2,"column":95,"nodeType":"280","messageId":"281","endLine":2,"endColumn":100},{"ruleId":"283","severity":1,"message":"284","line":80,"column":41,"nodeType":"285","messageId":"286","endLine":80,"endColumn":43},{"ruleId":"278","severity":1,"message":"293","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":48},{"ruleId":"278","severity":1,"message":"294","line":2,"column":54,"nodeType":"280","messageId":"281","endLine":2,"endColumn":64},{"ruleId":"278","severity":1,"message":"296","line":2,"column":78,"nodeType":"280","messageId":"281","endLine":2,"endColumn":94},{"ruleId":"278","severity":1,"message":"297","line":2,"column":95,"nodeType":"280","messageId":"281","endLine":2,"endColumn":100},{"ruleId":"278","severity":1,"message":"298","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":25},{"ruleId":"283","severity":1,"message":"284","line":34,"column":21,"nodeType":"285","messageId":"286","endLine":34,"endColumn":23},{"ruleId":"283","severity":1,"message":"284","line":38,"column":25,"nodeType":"285","messageId":"286","endLine":38,"endColumn":27},{"ruleId":"283","severity":1,"message":"284","line":46,"column":25,"nodeType":"285","messageId":"286","endLine":46,"endColumn":27},{"ruleId":"278","severity":1,"message":"282","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":22},{"ruleId":"278","severity":1,"message":"290","line":2,"column":29,"nodeType":"280","messageId":"281","endLine":2,"endColumn":39},{"ruleId":"278","severity":1,"message":"291","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":32},{"ruleId":"299","severity":1,"message":"300","line":130,"column":5,"nodeType":"301","endLine":130,"endColumn":47,"suggestions":"302"},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":48},{"ruleId":"278","severity":1,"message":"294","line":2,"column":54,"nodeType":"280","messageId":"281","endLine":2,"endColumn":64},{"ruleId":"278","severity":1,"message":"295","line":2,"column":66,"nodeType":"280","messageId":"281","endLine":2,"endColumn":77},{"ruleId":"278","severity":1,"message":"296","line":2,"column":78,"nodeType":"280","messageId":"281","endLine":2,"endColumn":94},{"ruleId":"278","severity":1,"message":"297","line":2,"column":95,"nodeType":"280","messageId":"281","endLine":2,"endColumn":100},{"ruleId":"278","severity":1,"message":"298","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":25},{"ruleId":"278","severity":1,"message":"303","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":20},{"ruleId":"278","severity":1,"message":"295","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":26},{"ruleId":"278","severity":1,"message":"304","line":1,"column":28,"nodeType":"280","messageId":"281","endLine":1,"endColumn":37},{"ruleId":"278","severity":1,"message":"305","line":68,"column":5,"nodeType":"280","messageId":"281","endLine":68,"endColumn":13},{"ruleId":"278","severity":1,"message":"282","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":22},{"ruleId":"278","severity":1,"message":"287","line":1,"column":37,"nodeType":"280","messageId":"281","endLine":1,"endColumn":42},{"ruleId":"278","severity":1,"message":"288","line":27,"column":9,"nodeType":"280","messageId":"281","endLine":27,"endColumn":17},{"ruleId":"283","severity":1,"message":"284","line":39,"column":21,"nodeType":"285","messageId":"286","endLine":39,"endColumn":23},{"ruleId":"283","severity":1,"message":"284","line":52,"column":21,"nodeType":"285","messageId":"286","endLine":52,"endColumn":23},{"ruleId":"278","severity":1,"message":"306","line":6,"column":20,"nodeType":"280","messageId":"281","endLine":6,"endColumn":27},{"ruleId":"278","severity":1,"message":"305","line":7,"column":5,"nodeType":"280","messageId":"281","endLine":7,"endColumn":13},{"ruleId":"278","severity":1,"message":"307","line":2,"column":10,"nodeType":"280","messageId":"281","endLine":2,"endColumn":13},{"ruleId":"278","severity":1,"message":"308","line":3,"column":16,"nodeType":"280","messageId":"281","endLine":3,"endColumn":20},{"ruleId":"278","severity":1,"message":"309","line":11,"column":50,"nodeType":"280","messageId":"281","endLine":11,"endColumn":65},{"ruleId":"278","severity":1,"message":"310","line":14,"column":10,"nodeType":"280","messageId":"281","endLine":14,"endColumn":18},{"ruleId":"278","severity":1,"message":"310","line":14,"column":10,"nodeType":"280","messageId":"281","endLine":14,"endColumn":18},{"ruleId":"278","severity":1,"message":"311","line":19,"column":34,"nodeType":"280","messageId":"281","endLine":19,"endColumn":38},{"ruleId":"278","severity":1,"message":"306","line":19,"column":40,"nodeType":"280","messageId":"281","endLine":19,"endColumn":47},{"ruleId":"278","severity":1,"message":"311","line":19,"column":34,"nodeType":"280","messageId":"281","endLine":19,"endColumn":38},{"ruleId":"278","severity":1,"message":"306","line":19,"column":40,"nodeType":"280","messageId":"281","endLine":19,"endColumn":47},{"ruleId":"278","severity":1,"message":"311","line":19,"column":34,"nodeType":"280","messageId":"281","endLine":19,"endColumn":38},{"ruleId":"278","severity":1,"message":"306","line":19,"column":40,"nodeType":"280","messageId":"281","endLine":19,"endColumn":47},{"ruleId":"278","severity":1,"message":"312","line":14,"column":21,"nodeType":"280","messageId":"281","endLine":14,"endColumn":30},{"ruleId":"278","severity":1,"message":"310","line":15,"column":10,"nodeType":"280","messageId":"281","endLine":15,"endColumn":18},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"no-unused-vars","'Layout' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Modal' is defined but never used.","'navigate' is assigned a value but never used.","'useCallback' is defined but never used.","'useContext' is defined but never used.","'PersonAddAlt1RoundedIcon' is defined but never used.","'CloudUploadRoundedIcon' is defined but never used.","'useEffect' is defined but never used.","'RadioGroup' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'SearchRoundedIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setAlert'. Either include it or remove the dependency array.","ArrayExpression",["315"],"'CustomButton' is defined but never used.","'TextField' is defined but never used.","'dispatch' is assigned a value but never used.","'loading' is assigned a value but never used.","'Box' is defined but never used.","'teal' is defined but never used.","'hospitalDoctors' is assigned a value but never used.","'setAlert' is assigned a value but never used.","'role' is assigned a value but never used.","'patientId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"316","fix":"317"},"Update the dependencies array to be: [setAlert, contract.methods, accounts]",{"range":"318","text":"319"},[4738,4780],"[setAlert, contract.methods, accounts]"]