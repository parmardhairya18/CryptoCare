{"ast":null,"code":"// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\nvar Buffer = require('safe-buffer').Buffer;\n\nmodule.exports = function base(ALPHABET) {\n  var ALPHABET_MAP = {};\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0); // pre-compute lookup table\n\n  for (var z = 0; z < ALPHABET.length; z++) {\n    var x = ALPHABET.charAt(z);\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');\n    ALPHABET_MAP[x] = z;\n  }\n\n  function encode(source) {\n    if (source.length === 0) return '';\n    var digits = [0];\n\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % BASE;\n        carry = carry / BASE | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE);\n        carry = carry / BASE | 0;\n      }\n    }\n\n    var string = ''; // deal with leading zeros\n\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER; // convert digits to a string\n\n\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]];\n\n    return string;\n  }\n\n  function decodeUnsafe(string) {\n    if (typeof string !== 'string') throw new TypeError('Expected String');\n    if (string.length === 0) return Buffer.allocUnsafe(0);\n    var bytes = [0];\n\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]];\n      if (value === undefined) return;\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    } // deal with leading zeros\n\n\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0);\n    }\n\n    return Buffer.from(bytes.reverse());\n  }\n\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) return buffer;\n    throw new Error('Non-base' + BASE + ' character');\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n};","map":{"version":3,"names":["Buffer","require","module","exports","base","ALPHABET","ALPHABET_MAP","BASE","length","LEADER","charAt","z","x","undefined","TypeError","encode","source","digits","i","j","carry","push","string","k","q","decodeUnsafe","allocUnsafe","bytes","value","from","reverse","decode","buffer","Error"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/node_modules/multibase/node_modules/base-x/index.js"],"sourcesContent":["// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  var ALPHABET_MAP = {}\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n\n  // pre-compute lookup table\n  for (var z = 0; z < ALPHABET.length; z++) {\n    var x = ALPHABET.charAt(z)\n\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n    ALPHABET_MAP[x] = z\n  }\n\n  function encode (source) {\n    if (source.length === 0) return ''\n\n    var digits = [0]\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8\n        digits[j] = carry % BASE\n        carry = (carry / BASE) | 0\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE)\n        carry = (carry / BASE) | 0\n      }\n    }\n\n    var string = ''\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]\n\n    return string\n  }\n\n  function decodeUnsafe (string) {\n    if (typeof string !== 'string') throw new TypeError('Expected String')\n    if (string.length === 0) return Buffer.allocUnsafe(0)\n\n    var bytes = [0]\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]]\n      if (value === undefined) return\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE\n        bytes[j] = carry & 0xff\n        carry >>= 8\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff)\n        carry >>= 8\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0)\n    }\n\n    return Buffer.from(bytes.reverse())\n  }\n\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}