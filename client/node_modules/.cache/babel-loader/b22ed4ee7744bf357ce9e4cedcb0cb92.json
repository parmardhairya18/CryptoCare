{"ast":null,"code":"var _jsxFileName = \"R:\\\\New_Block\\\\client\\\\src\\\\pages\\\\doctor\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material';\nimport React, { useCallback, useContext } from 'react';\nimport { useState } from 'react';\nimport CustomButton from '../../components/CustomButton';\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded';\nimport useEth from '../../contexts/EthContext/useEth';\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded';\nimport useAlert from '../../contexts/AlertContext/useAlert';\nimport AddRecordModal from './AddRecordModal';\nimport CloudUploadRoundedIcon from '@mui/icons-material/CloudUploadRounded';\nimport ipfs from '../../ipfs';\nimport Record from '../../components/Record';\nimport CryptoJS from \"crypto-js\";\nimport Patient from '../../components/Patient';\nimport DoctorAccess from '../../components/access/doctorAccess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Doctor = () => {\n  _s();\n\n  const {\n    state: {\n      contract,\n      accounts,\n      role,\n      loading\n    }\n  } = useEth();\n  const {\n    setAlert\n  } = useAlert();\n  const [patientExist, setPatientExist] = useState(false);\n  const [searchPatientAddress, setSearchPatientAddress] = useState('');\n  const [records, setRecords] = useState([]);\n  const [addRecord, setAddRecord] = useState(false);\n  const [requestPatientAddress, setRequestPatientAddress] = useState('');\n  const [access, setAccess] = useState(false);\n  const [details, setDetails] = useState([]);\n\n  const searchPatient = async () => {\n    try {\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(searchPatientAddress)) {\n        setAlert('Please enter a valid wallet address', 'error');\n        return;\n      }\n\n      const patientExists = await contract.methods.getPatientExists(searchPatientAddress).call({\n        from: accounts[0]\n      });\n\n      if (patientExists) {\n        setPatientExist(true);\n        const access = await contract.methods.verifyAccess(searchPatientAddress, accounts[0]).call({\n          from: accounts[0]\n        });\n        setAccess(access);\n\n        if (access) {\n          // setAlert(\"you have access\",\"success\")\n          const details = await contract.methods.getPatient(searchPatientAddress).call({\n            from: accounts[0]\n          });\n          console.log(details);\n          setDetails(details);\n          const records = await contract.methods.getRecordsDoctor(searchPatientAddress).call({\n            from: accounts[0]\n          });\n          console.log('records :>> ', records);\n          setRecords(records);\n        } else {\n          setAlert(\"Access Denied, request patient!\", \"error\"); // setAccess(false)\n        }\n      } else if (!patientExists) {\n        setAlert('Patient does not exist', 'error');\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getRequestAccess = async () => {\n    try {\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(requestPatientAddress)) {\n        setAlert('Please enter a valid wallet address', 'error');\n        return;\n      }\n\n      const patientExists = await contract.methods.getPatientExists(requestPatientAddress).call({\n        from: accounts[0]\n      }); // console.log(requestPatientAddress)\n\n      if (patientExists) {\n        try {\n          await contract.methods.requestAccess(requestPatientAddress).send({\n            from: accounts[0]\n          });\n          setAlert('request sent successfully!', 'success');\n        } catch (err) {\n          setAlert(\"request already sent!\", 'error');\n          console.error(err);\n        }\n      } else {\n        setAlert(\"patient does not exist!\", \"error\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const addRecordCallback = useCallback(async (buffer, fileName, patientAddress) => {\n    if (!patientAddress) {\n      setAlert('Please search for a patient first', 'error');\n      return;\n    }\n\n    try {\n      const key = \"oiewrhg5623475vbeihc39873948^&%E@ZfytfE#&@^ tf1wufhx231277!*YE2\";\n      const res = await ipfs.add(buffer);\n      const ipfsHashValue = res[0].hash;\n      const ipfsBytes = CryptoJS.enc.Utf8.parse(ipfsHashValue);\n      var ipfsHash = CryptoJS.AES.encrypt(ipfsBytes, key).toString(); // Encryption: I: WordArray -> O: -> Base64 encoded string (OpenSSL)\n      // console.log(ipfsHash)\n      // console.log(ipfsHashValue)\n\n      if (ipfsHash) {\n        await contract.methods.addRecord(ipfsHash, fileName, patientAddress).send({\n          from: accounts[0]\n        });\n        setAlert('New record uploaded', 'success');\n        setAddRecord(true); // refresh records\n\n        const records = await contract.methods.getRecordsDoctor(patientAddress).call({\n          from: accounts[0]\n        });\n        setRecords(records);\n      }\n    } catch (err) {\n      setAlert('Record upload failed', 'error');\n      console.error(err);\n    }\n  }, [searchPatientAddress, accounts, contract]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      sx: {\n        color: '#fff',\n        zIndex: theme => theme.zIndex.drawer + 1\n      },\n      open: loading,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      width: \"100vw\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        width: \"60%\",\n        my: 5,\n        children: !accounts ? /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Open your MetaMask wallet to get connected, then refresh this page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [role === 'doctor' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Modal, {\n              open: addRecord,\n              onClose: () => setAddRecord(false),\n              children: /*#__PURE__*/_jsxDEV(AddRecordModal, {\n                handleClose: () => setAddRecord(false),\n                handleUpload: addRecordCallback,\n                patientAddress: searchPatientAddress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              children: \"Patient Records\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              alignItems: \"center\",\n              my: 1,\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  variant: \"outlined\",\n                  placeholder: \"Search patient by wallet address\",\n                  value: searchPatientAddress,\n                  onChange: e => setSearchPatientAddress(e.target.value),\n                  InputProps: {\n                    style: {\n                      fontSize: '15px'\n                    }\n                  },\n                  InputLabelProps: {\n                    style: {\n                      fontSize: '15px'\n                    }\n                  },\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                mx: 2,\n                children: /*#__PURE__*/_jsxDEV(CustomButton, {\n                  text: 'Search',\n                  handleClick: () => {\n                    searchPatient();\n                  },\n                  children: /*#__PURE__*/_jsxDEV(SearchRoundedIcon, {\n                    style: {\n                      color: 'white'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 21\n              }, this), access && /*#__PURE__*/_jsxDEV(CustomButton, {\n                text: 'New Record',\n                handleClick: () => setAddRecord(true),\n                disabled: !patientExist,\n                children: /*#__PURE__*/_jsxDEV(CloudUploadRoundedIcon, {\n                  style: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this), patientExist && !access && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                children: \"Request Access\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 22\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                alignItems: \"center\",\n                my: 1,\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  fullWidth: true,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    variant: \"outlined\",\n                    placeholder: \"Enter Patient Address to request\",\n                    value: requestPatientAddress,\n                    onChange: e => setRequestPatientAddress(e.target.value),\n                    InputProps: {\n                      style: {\n                        fontSize: '15px'\n                      }\n                    },\n                    InputLabelProps: {\n                      style: {\n                        fontSize: '15px'\n                      }\n                    },\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  mx: 2,\n                  children: /*#__PURE__*/_jsxDEV(CustomButton, {\n                    text: 'Request',\n                    handleClick: () => getRequestAccess(),\n                    children: /*#__PURE__*/_jsxDEV(SearchRoundedIcon, {\n                      style: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), patientExist && access && /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              flexDirection: \"column\",\n              mt: 3,\n              mb: -2,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                mb: 2,\n                children: /*#__PURE__*/_jsxDEV(Patient, {\n                  patient: details\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 22\n            }, this), patientExist && records.length === 0 && access && /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              my: 5,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                children: \"No records found\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 21\n            }, this), patientExist && records.length > 0 && access && /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              flexDirection: \"column\",\n              mt: 3,\n              mb: -2,\n              children: records.map((record, index) => /*#__PURE__*/_jsxDEV(Box, {\n                mb: 2,\n                children: /*#__PURE__*/_jsxDEV(Record, {\n                  record: record\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(DoctorAccess, {\n            role: role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Doctor, \"+7NeK2U6SPpQtHes+FWv8YOx//w=\", false, function () {\n  return [useEth, useAlert];\n});\n\n_c = Doctor;\nexport default Doctor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Doctor\");","map":{"version":3,"names":["Box","Divider","FormControl","Modal","TextField","Typography","Backdrop","CircularProgress","React","useCallback","useContext","useState","CustomButton","SearchRoundedIcon","useEth","PersonAddAlt1RoundedIcon","useAlert","AddRecordModal","CloudUploadRoundedIcon","ipfs","Record","CryptoJS","Patient","DoctorAccess","Doctor","state","contract","accounts","role","loading","setAlert","patientExist","setPatientExist","searchPatientAddress","setSearchPatientAddress","records","setRecords","addRecord","setAddRecord","requestPatientAddress","setRequestPatientAddress","access","setAccess","details","setDetails","searchPatient","test","patientExists","methods","getPatientExists","call","from","verifyAccess","getPatient","console","log","getRecordsDoctor","err","getRequestAccess","requestAccess","send","error","addRecordCallback","buffer","fileName","patientAddress","key","res","add","ipfsHashValue","hash","ipfsBytes","enc","Utf8","parse","ipfsHash","AES","encrypt","toString","color","zIndex","theme","drawer","e","target","value","style","fontSize","length","map","record","index"],"sources":["R:/New_Block/client/src/pages/doctor/index.jsx"],"sourcesContent":["import { Box, Divider, FormControl, Modal, TextField, Typography, Backdrop, CircularProgress } from '@mui/material'\r\nimport React, { useCallback,useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport CustomButton from '../../components/CustomButton'\r\nimport SearchRoundedIcon from '@mui/icons-material/SearchRounded'\r\nimport useEth from '../../contexts/EthContext/useEth'\r\nimport PersonAddAlt1RoundedIcon from '@mui/icons-material/PersonAddAlt1Rounded'\r\nimport useAlert from '../../contexts/AlertContext/useAlert'\r\nimport AddRecordModal from './AddRecordModal'\r\nimport CloudUploadRoundedIcon from '@mui/icons-material/CloudUploadRounded'\r\nimport ipfs from '../../ipfs'\r\nimport Record from '../../components/Record'\r\nimport CryptoJS from \"crypto-js\";\r\nimport Patient from '../../components/Patient'\r\nimport DoctorAccess from '../../components/access/doctorAccess'\r\n\r\n\r\n\r\n\r\nconst Doctor = () => {\r\n  const {\r\n    state: { contract, accounts, role, loading },\r\n  } = useEth()\r\n  const { setAlert } = useAlert()\r\n\r\n  const [patientExist, setPatientExist] = useState(false)\r\n  const [searchPatientAddress, setSearchPatientAddress] = useState('')\r\n  const [records, setRecords] = useState([])\r\n  const [addRecord, setAddRecord] = useState(false)\r\n  const [requestPatientAddress,setRequestPatientAddress] = useState('')\r\n  const [access,setAccess] = useState(false)\r\n  const [details,setDetails] = useState([])\r\n\r\n\r\n  \r\n\r\n  const searchPatient = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(searchPatientAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      const patientExists = await contract.methods.getPatientExists(searchPatientAddress).call({ from: accounts[0] })\r\n      if (patientExists) {\r\n        setPatientExist(true)\r\n        const access = await contract.methods.verifyAccess(searchPatientAddress,accounts[0]).call({ from: accounts[0] })\r\n        setAccess(access)\r\n        if(access){\r\n        // setAlert(\"you have access\",\"success\")\r\n        const details = await contract.methods.getPatient(searchPatientAddress).call({ from: accounts[0] })\r\n        console.log(details)\r\n        setDetails(details)\r\n        const records = await contract.methods.getRecordsDoctor(searchPatientAddress).call({ from: accounts[0] })\r\n        console.log('records :>> ', records)\r\n        setRecords(records)\r\n      }\r\n      else{\r\n        setAlert(\"Access Denied, request patient!\",\"error\")\r\n        // setAccess(false)\r\n\r\n      }\r\n\r\n      }\r\n       else if(!patientExists) {\r\n        setAlert('Patient does not exist', 'error')\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  const getRequestAccess = async () => {\r\n    try {\r\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(requestPatientAddress)) {\r\n        setAlert('Please enter a valid wallet address', 'error')\r\n        return\r\n      }\r\n      const patientExists = await contract.methods.getPatientExists(requestPatientAddress).call({ from: accounts[0] })\r\n      // console.log(requestPatientAddress)\r\n      if(patientExists){\r\n        try{\r\n        await contract.methods.requestAccess(requestPatientAddress).send({ from : accounts[0] })\r\n        setAlert('request sent successfully!','success')\r\n      }catch(err){\r\n        setAlert(\"request already sent!\",'error')\r\n        console.error(err)\r\n      }\r\n      \r\n    }\r\n    else{\r\n      setAlert(\"patient does not exist!\",\"error\")\r\n    }\r\n  }\r\n    catch(err){\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  const addRecordCallback = useCallback(\r\n    async (buffer, fileName, patientAddress) => {\r\n      if (!patientAddress) {\r\n        setAlert('Please search for a patient first', 'error')\r\n        return\r\n      }\r\n      try {\r\n        const key = \"oiewrhg5623475vbeihc39873948^&%E@ZfytfE#&@^ tf1wufhx231277!*YE2\"\r\n        const res = await ipfs.add(buffer)\r\n        const ipfsHashValue = res[0].hash\r\n        const ipfsBytes = CryptoJS.enc.Utf8.parse(ipfsHashValue);\r\n        var ipfsHash = CryptoJS.AES.encrypt(ipfsBytes, key).toString();        // Encryption: I: WordArray -> O: -> Base64 encoded string (OpenSSL)\r\n        // console.log(ipfsHash)\r\n        // console.log(ipfsHashValue)\r\n       \r\n\r\n        if (ipfsHash) {\r\n          await contract.methods.addRecord(ipfsHash, fileName, patientAddress).send({ from: accounts[0] })\r\n          setAlert('New record uploaded', 'success')\r\n          setAddRecord(true)\r\n\r\n          // refresh records\r\n          const records = await contract.methods.getRecordsDoctor(patientAddress).call({ from: accounts[0] })\r\n          setRecords(records)\r\n        }\r\n        \r\n      } catch (err) {\r\n        setAlert('Record upload failed', 'error')\r\n        console.error(err)\r\n      }\r\n    },\r\n    [searchPatientAddress, accounts, contract]\r\n  )\r\n\r\n  if (loading) {\r\n    return (\r\n      <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    )\r\n  } else {\r\n    return (\r\n      <Box display='flex' justifyContent='center' width='100vw'>\r\n        <Box width='60%' my={5}>\r\n          {!accounts ? (\r\n            <Box display='flex' justifyContent='center'>\r\n              <Typography variant='h6'>Open your MetaMask wallet to get connected, then refresh this page</Typography>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              {role === 'doctor' && (\r\n                <>\r\n                  <Modal open={addRecord} onClose={() => setAddRecord(false)}>\r\n                    <AddRecordModal\r\n                      handleClose={() => setAddRecord(false)}\r\n                      handleUpload={addRecordCallback}\r\n                      patientAddress={searchPatientAddress}\r\n                    />\r\n                  </Modal>\r\n\r\n                  <Typography variant='h4'>Patient Records</Typography>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Search patient by wallet address'\r\n                        value={searchPatientAddress}\r\n                        onChange={e => setSearchPatientAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Search'} handleClick={() => {searchPatient()}}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    {access && (\r\n                    <CustomButton text={'New Record'} handleClick={() => setAddRecord(true)} disabled={!patientExist}>\r\n                      <CloudUploadRoundedIcon style={{ color: 'white' }} />\r\n                    </CustomButton>\r\n                    )\r\n                  }\r\n                  </Box>\r\n\r\n                  {patientExist && !access && (\r\n                    <>\r\n                     <Typography variant='h4'>Request Access</Typography>\r\n                  <Box display='flex' alignItems='center' my={1}>\r\n                    <FormControl fullWidth>\r\n                      <TextField\r\n                        variant='outlined'\r\n                        placeholder='Enter Patient Address to request'\r\n                        value={requestPatientAddress}\r\n                        onChange={e => setRequestPatientAddress(e.target.value)}\r\n                        InputProps={{ style: { fontSize: '15px' } }}\r\n                        InputLabelProps={{ style: { fontSize: '15px' } }}\r\n                        size='small'\r\n                      />\r\n                    </FormControl>\r\n                    <Box mx={2}>\r\n                      <CustomButton text={'Request'} handleClick={() => getRequestAccess()}>\r\n                        <SearchRoundedIcon style={{ color: 'white' }} />\r\n                      </CustomButton>\r\n                    </Box>\r\n                    </Box>\r\n                    </>\r\n\r\n                    )}\r\n                  {patientExist && access && (\r\n                     <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                        <Box mb={2}>\r\n                          <Patient patient={details} />\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    )}\r\n\r\n                  {patientExist && records.length === 0 && access && (\r\n                    <Box display='flex' alignItems='center' justifyContent='center' my={5}>\r\n                      <Typography variant='h5'>No records found</Typography>\r\n                    </Box>\r\n                  )}\r\n\r\n                  {patientExist && records.length > 0 && access && (\r\n                    <Box display='flex' flexDirection='column' mt={3} mb={-2}>\r\n                      {records.map((record, index) => (\r\n                        <Box mb={2}>\r\n                          <Record key={index} record={record} />\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                  )}\r\n                </>\r\n              )}\r\n              <DoctorAccess role={role}/>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Doctor\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}