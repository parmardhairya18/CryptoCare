{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst ConcatStream = require('concat-stream');\n\nconst once = require('once');\n\nconst isStream = require('is-stream');\n\nconst OtherBuffer = require('buffer').Buffer;\n\nconst isSource = require('is-pull-stream').isSource;\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nconst SendFilesStream = require('../utils/send-files-stream');\n\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    options.converter = FileResultStreamConverter;\n    const ok = Buffer.isBuffer(_files) || isStream.readable(_files) || Array.isArray(_files) || OtherBuffer.isBuffer(_files) || typeof _files === 'object' || isSource(_files);\n\n    if (!ok) {\n      return callback(new Error('first arg must be a buffer, readable stream, pull stream, an object or array of objects'));\n    }\n\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n  return function () {\n    const args = Array.from(arguments); // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":{"version":3,"names":["promisify","require","ConcatStream","once","isStream","OtherBuffer","Buffer","isSource","FileResultStreamConverter","SendFilesStream","module","exports","send","createAddStream","add","_files","options","_callback","callback","converter","ok","isBuffer","readable","Array","isArray","Error","files","concat","stream","qs","result","pipe","forEach","file","write","end","args","from","arguments","length","push","apply"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/src/files/add.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst ConcatStream = require('concat-stream')\nconst once = require('once')\nconst isStream = require('is-stream')\nconst OtherBuffer = require('buffer').Buffer\nconst isSource = require('is-pull-stream').isSource\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\nconst SendFilesStream = require('../utils/send-files-stream')\n\nmodule.exports = (send) => {\n  const createAddStream = SendFilesStream(send, 'add')\n\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options\n      options = null\n    }\n\n    const callback = once(_callback)\n\n    if (!options) {\n      options = {}\n    }\n    options.converter = FileResultStreamConverter\n\n    const ok = Buffer.isBuffer(_files) ||\n               isStream.readable(_files) ||\n               Array.isArray(_files) ||\n               OtherBuffer.isBuffer(_files) ||\n               typeof _files === 'object' ||\n               isSource(_files)\n\n    if (!ok) {\n      return callback(new Error('first arg must be a buffer, readable stream, pull stream, an object or array of objects'))\n    }\n\n    const files = [].concat(_files)\n\n    const stream = createAddStream({ qs: options })\n    const concat = ConcatStream((result) => callback(null, result))\n    stream.once('error', callback)\n    stream.pipe(concat)\n\n    files.forEach((file) => stream.write(file))\n    stream.end()\n  })\n\n  return function () {\n    const args = Array.from(arguments)\n\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({})\n    }\n\n    return add.apply(null, args)\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBK,MAAtC;;AACA,MAAMC,QAAQ,GAAGN,OAAO,CAAC,gBAAD,CAAP,CAA0BM,QAA3C;;AACA,MAAMC,yBAAyB,GAAGP,OAAO,CAAC,uCAAD,CAAzC;;AACA,MAAMQ,eAAe,GAAGR,OAAO,CAAC,4BAAD,CAA/B;;AAEAS,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;EACzB,MAAMC,eAAe,GAAGJ,eAAe,CAACG,IAAD,EAAO,KAAP,CAAvC;EAEA,MAAME,GAAG,GAAGd,SAAS,CAAC,CAACe,MAAD,EAASC,OAAT,EAAkBC,SAAlB,KAAgC;IACpD,IAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;MACjCC,SAAS,GAAGD,OAAZ;MACAA,OAAO,GAAG,IAAV;IACD;;IAED,MAAME,QAAQ,GAAGf,IAAI,CAACc,SAAD,CAArB;;IAEA,IAAI,CAACD,OAAL,EAAc;MACZA,OAAO,GAAG,EAAV;IACD;;IACDA,OAAO,CAACG,SAAR,GAAoBX,yBAApB;IAEA,MAAMY,EAAE,GAAGd,MAAM,CAACe,QAAP,CAAgBN,MAAhB,KACAX,QAAQ,CAACkB,QAAT,CAAkBP,MAAlB,CADA,IAEAQ,KAAK,CAACC,OAAN,CAAcT,MAAd,CAFA,IAGAV,WAAW,CAACgB,QAAZ,CAAqBN,MAArB,CAHA,IAIA,OAAOA,MAAP,KAAkB,QAJlB,IAKAR,QAAQ,CAACQ,MAAD,CALnB;;IAOA,IAAI,CAACK,EAAL,EAAS;MACP,OAAOF,QAAQ,CAAC,IAAIO,KAAJ,CAAU,yFAAV,CAAD,CAAf;IACD;;IAED,MAAMC,KAAK,GAAG,GAAGC,MAAH,CAAUZ,MAAV,CAAd;IAEA,MAAMa,MAAM,GAAGf,eAAe,CAAC;MAAEgB,EAAE,EAAEb;IAAN,CAAD,CAA9B;IACA,MAAMW,MAAM,GAAGzB,YAAY,CAAE4B,MAAD,IAAYZ,QAAQ,CAAC,IAAD,EAAOY,MAAP,CAArB,CAA3B;IACAF,MAAM,CAACzB,IAAP,CAAY,OAAZ,EAAqBe,QAArB;IACAU,MAAM,CAACG,IAAP,CAAYJ,MAAZ;IAEAD,KAAK,CAACM,OAAN,CAAeC,IAAD,IAAUL,MAAM,CAACM,KAAP,CAAaD,IAAb,CAAxB;IACAL,MAAM,CAACO,GAAP;EACD,CAjCoB,CAArB;EAmCA,OAAO,YAAY;IACjB,MAAMC,IAAI,GAAGb,KAAK,CAACc,IAAN,CAAWC,SAAX,CAAb,CADiB,CAGjB;IACA;IACA;;IACA,IAAIF,IAAI,CAACG,MAAL,KAAgB,CAAhB,IAAqBhC,QAAQ,CAAC6B,IAAI,CAAC,CAAD,CAAL,CAAjC,EAA4C;MAC1CA,IAAI,CAACI,IAAL,CAAU,EAAV;IACD;;IAED,OAAO1B,GAAG,CAAC2B,KAAJ,CAAU,IAAV,EAAgBL,IAAhB,CAAP;EACD,CAXD;AAYD,CAlDD"},"metadata":{},"sourceType":"script"}