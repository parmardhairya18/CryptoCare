{"ast":null,"code":"'use strict';\n\nconst ip = require('ip');\n\nconst ipAddress = require('ip-address');\n\nconst protocols = require('./protocols-table');\n\nconst bs58 = require('bs58');\n\nconst varint = require('varint');\n\nmodule.exports = Convert; // converts (serializes) addresses\n\nfunction Convert(proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBuffer(proto, a);\n  }\n}\n\nConvert.toString = function convertToString(proto, buf) {\n  proto = protocols(proto);\n\n  switch (proto.code) {\n    case 4: // ipv4\n\n    case 41:\n      // ipv6\n      return ip.toString(buf);\n\n    case 6: // tcp\n\n    case 17: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return buf2port(buf);\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56:\n      // dnsaddr\n      return buf2str(buf);\n\n    case 421:\n      // ipfs\n      return buf2mh(buf);\n\n    default:\n      return buf.toString('hex');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBuffer = function convertToBuffer(proto, str) {\n  proto = protocols(proto);\n\n  switch (proto.code) {\n    case 4:\n      // ipv4\n      return ip2buf(new ipAddress.Address4(str));\n\n    case 41:\n      // ipv6\n      return ip2buf(new ipAddress.Address6(str));\n\n    case 6: // tcp\n\n    case 17: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return port2buf(parseInt(str, 10));\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56:\n      // dnsaddr\n      return str2buf(str);\n\n    case 421:\n      // ipfs\n      return mh2buf(str);\n\n    default:\n      return Buffer.from(str, 'hex');\n    // no clue. convert from hex\n  }\n};\n\nfunction ip2buf(ipaddr) {\n  if (!ipaddr.isValid()) throw new Error('invalid ip address');\n  return ip.toBuffer(ipaddr.address);\n}\n\nfunction port2buf(port) {\n  const buf = Buffer.alloc(2);\n  buf.writeUInt16BE(port, 0);\n  return buf;\n}\n\nfunction buf2port(buf) {\n  return buf.readUInt16BE(0);\n}\n\nfunction str2buf(str) {\n  const buf = Buffer.from(str);\n  const size = Buffer.from(varint.encode(buf.length));\n  return Buffer.concat([size, buf]);\n}\n\nfunction buf2str(buf) {\n  const size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return buf.toString();\n}\n\nfunction mh2buf(hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash));\n  const size = Buffer.from(varint.encode(mh.length));\n  return Buffer.concat([size, mh]);\n}\n\nfunction buf2mh(buf) {\n  const size = varint.decode(buf);\n  const address = buf.slice(varint.decode.bytes);\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return bs58.encode(address);\n}","map":{"version":3,"names":["ip","require","ipAddress","protocols","bs58","varint","module","exports","Convert","proto","a","Buffer","toString","toBuffer","convertToString","buf","code","buf2port","buf2str","buf2mh","convertToBuffer","str","ip2buf","Address4","Address6","port2buf","parseInt","str2buf","mh2buf","from","ipaddr","isValid","Error","address","port","alloc","writeUInt16BE","readUInt16BE","size","encode","length","concat","decode","slice","bytes","hash","mh"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/node_modules/peer-info/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\n\nconst ip = require('ip')\nconst ipAddress = require('ip-address')\nconst protocols = require('./protocols-table')\nconst bs58 = require('bs58')\nconst varint = require('varint')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\nfunction Convert (proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBuffer(proto, a)\n  }\n}\n\nConvert.toString = function convertToString (proto, buf) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return ip.toString(buf)\n\n    case 6: // tcp\n    case 17: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return buf2port(buf)\n\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n      return buf2str(buf)\n\n    case 421: // ipfs\n      return buf2mh(buf)\n    default:\n      return buf.toString('hex') // no clue. convert to hex\n  }\n}\n\nConvert.toBuffer = function convertToBuffer (proto, str) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n      return ip2buf(new ipAddress.Address4(str))\n    case 41: // ipv6\n      return ip2buf(new ipAddress.Address6(str))\n\n    case 6: // tcp\n    case 17: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2buf(parseInt(str, 10))\n\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n      return str2buf(str)\n\n    case 421: // ipfs\n      return mh2buf(str)\n    default:\n      return Buffer.from(str, 'hex') // no clue. convert from hex\n  }\n}\n\nfunction ip2buf (ipaddr) {\n  if (!ipaddr.isValid()) throw new Error('invalid ip address')\n  return ip.toBuffer(ipaddr.address)\n}\n\nfunction port2buf (port) {\n  const buf = Buffer.alloc(2)\n  buf.writeUInt16BE(port, 0)\n  return buf\n}\n\nfunction buf2port (buf) {\n  return buf.readUInt16BE(0)\n}\n\nfunction str2buf (str) {\n  const buf = Buffer.from(str)\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return buf.toString()\n}\n\nfunction mh2buf (hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash))\n  const size = Buffer.from(varint.encode(mh.length))\n  return Buffer.concat([size, mh])\n}\n\nfunction buf2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return bs58.encode(address)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}