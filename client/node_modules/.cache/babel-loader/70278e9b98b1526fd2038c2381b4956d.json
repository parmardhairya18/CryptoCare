{"ast":null,"code":"'use strict';\n\nconst base58 = require('bs58');\n\nconst multihash = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst CID = require('cids');\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 4;\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/;\nconst fqdnHashMatch = 1;\nconst fqdnProtocolMatch = 2;\n\nfunction isMultihash(hash) {\n  const formatted = convertToString(hash);\n\n  try {\n    const buffer = Buffer.from(base58.decode(formatted));\n    multihash.decode(buffer);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isCID(hash) {\n  try {\n    return CID.isCID(new CID(hash));\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isIpfs(input, pattern) {\n  let protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  let hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  let hash = match[hashMatch];\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n\nfunction isIpns(input, pattern) {\n  let protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  let hashMatch = arguments.length > 3 ? arguments[3] : undefined;\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]; // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n\n    hash = hash.toLowerCase();\n    return isCID(hash);\n  }\n\n  return true;\n}\n\nfunction convertToString(input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input);\n  }\n\n  if (typeof input === 'string') {\n    return input;\n  }\n\n  return false;\n}\n\nconst ipfsSubdomain = url => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n\nconst ipnsSubdomain = url => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: cid => isMultibase(cid) === 'base32' && isCID(cid),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: url => ipfsSubdomain(url) || ipnsSubdomain(url),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: url => isIpfs(url, urlPattern),\n  ipnsUrl: url => isIpns(url, urlPattern),\n  url: url => isIpfs(url, urlPattern) || isIpns(url, urlPattern),\n  urlPattern: urlPattern,\n  ipfsPath: path => isIpfs(path, pathPattern),\n  ipnsPath: path => isIpns(path, pathPattern),\n  path: path => isIpfs(path, pathPattern) || isIpns(path, pathPattern),\n  pathPattern: pathPattern,\n  urlOrPath: x => isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern)\n};","map":{"version":3,"names":["base58","require","multihash","multibase","CID","urlPattern","pathPattern","defaultProtocolMatch","defaultHashMath","fqdnPattern","fqdnHashMatch","fqdnProtocolMatch","isMultihash","hash","formatted","convertToString","buffer","Buffer","from","decode","e","isMultibase","isEncoded","isCID","isIpfs","input","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","isBuffer","encode","ipfsSubdomain","url","ipnsSubdomain","module","exports","cid","base32cid","subdomain","subdomainPattern","ipfsUrl","ipnsUrl","ipfsPath","path","ipnsPath","urlOrPath","x"],"sources":["R:/New_Block/client/node_modules/ipfs-api/node_modules/is-ipfs/src/index.js"],"sourcesContent":["'use strict'\n\nconst base58 = require('bs58')\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst CID = require('cids')\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 4\n\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/\nconst fqdnHashMatch = 1\nconst fqdnProtocolMatch = 2\n\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    const buffer = Buffer.from(base58.decode(formatted))\n    multihash.decode(buffer)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isCID (hash) {\n  try {\n    return CID.isCID(new CID(hash))\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n    return isCID(hash)\n  }\n\n  return true\n}\n\nfunction convertToString (input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input)\n  }\n\n  if (typeof input === 'string') {\n    return input\n  }\n\n  return false\n}\n\nconst ipfsSubdomain = (url) => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\nconst ipnsSubdomain = (url) => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: (url) => (ipfsSubdomain(url) || ipnsSubdomain(url)),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: (url) => isIpfs(url, urlPattern),\n  ipnsUrl: (url) => isIpns(url, urlPattern),\n  url: (url) => (isIpfs(url, urlPattern) || isIpns(url, urlPattern)),\n  urlPattern: urlPattern,\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path: (path) => (isIpfs(path, pathPattern) || isIpns(path, pathPattern)),\n  pathPattern: pathPattern,\n  urlOrPath: (x) => (isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}