{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isISO6346 = isISO6346;\nexports.isFreightContainerID = void 0;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // https://en.wikipedia.org/wiki/ISO_6346\n// according to ISO6346 standard, checksum digit is mandatory for freight container but recommended\n// for other container types (J and Z)\n\n\nvar isISO6346Str = /^[A-Z]{3}(U[0-9]{7})|([J,Z][0-9]{6,7})$/;\nvar isDigit = /^[0-9]$/;\n\nfunction isISO6346(str) {\n  (0, _assertString.default)(str);\n  str = str.toUpperCase();\n  if (!isISO6346Str.test(str)) return false;\n\n  if (str.length === 11) {\n    var sum = 0;\n\n    for (var i = 0; i < str.length - 1; i++) {\n      if (!isDigit.test(str[i])) {\n        var convertedCode = void 0;\n        var letterCode = str.charCodeAt(i) - 55;\n        if (letterCode < 11) convertedCode = letterCode;else if (letterCode >= 11 && letterCode <= 20) convertedCode = 12 + letterCode % 11;else if (letterCode >= 21 && letterCode <= 30) convertedCode = 23 + letterCode % 21;else convertedCode = 34 + letterCode % 31;\n        sum += convertedCode * Math.pow(2, i);\n      } else sum += str[i] * Math.pow(2, i);\n    }\n\n    var checkSumDigit = sum % 11;\n    return Number(str[str.length - 1]) === checkSumDigit;\n  }\n\n  return true;\n}\n\nvar isFreightContainerID = isISO6346;\nexports.isFreightContainerID = isFreightContainerID;","map":{"version":3,"names":["Object","defineProperty","exports","value","isISO6346","isFreightContainerID","_assertString","_interopRequireDefault","require","obj","__esModule","default","isISO6346Str","isDigit","str","toUpperCase","test","length","sum","i","convertedCode","letterCode","charCodeAt","Math","pow","checkSumDigit","Number"],"sources":["R:/New_Block/client/node_modules/validator/lib/isISO6346.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isISO6346 = isISO6346;\nexports.isFreightContainerID = void 0;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// https://en.wikipedia.org/wiki/ISO_6346\n// according to ISO6346 standard, checksum digit is mandatory for freight container but recommended\n// for other container types (J and Z)\nvar isISO6346Str = /^[A-Z]{3}(U[0-9]{7})|([J,Z][0-9]{6,7})$/;\nvar isDigit = /^[0-9]$/;\n\nfunction isISO6346(str) {\n  (0, _assertString.default)(str);\n  str = str.toUpperCase();\n  if (!isISO6346Str.test(str)) return false;\n\n  if (str.length === 11) {\n    var sum = 0;\n\n    for (var i = 0; i < str.length - 1; i++) {\n      if (!isDigit.test(str[i])) {\n        var convertedCode = void 0;\n        var letterCode = str.charCodeAt(i) - 55;\n        if (letterCode < 11) convertedCode = letterCode;else if (letterCode >= 11 && letterCode <= 20) convertedCode = 12 + letterCode % 11;else if (letterCode >= 21 && letterCode <= 30) convertedCode = 23 + letterCode % 21;else convertedCode = 34 + letterCode % 31;\n        sum += convertedCode * Math.pow(2, i);\n      } else sum += str[i] * Math.pow(2, i);\n    }\n\n    var checkSumDigit = sum % 11;\n    return Number(str[str.length - 1]) === checkSumDigit;\n  }\n\n  return true;\n}\n\nvar isFreightContainerID = isISO6346;\nexports.isFreightContainerID = isFreightContainerID;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACG,oBAAR,GAA+B,KAAK,CAApC;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA1C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD,C,CAE/F;AACA;AACA;;;AACA,IAAIG,YAAY,GAAG,yCAAnB;AACA,IAAIC,OAAO,GAAG,SAAd;;AAEA,SAAST,SAAT,CAAmBU,GAAnB,EAAwB;EACtB,CAAC,GAAGR,aAAa,CAACK,OAAlB,EAA2BG,GAA3B;EACAA,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;EACA,IAAI,CAACH,YAAY,CAACI,IAAb,CAAkBF,GAAlB,CAAL,EAA6B,OAAO,KAAP;;EAE7B,IAAIA,GAAG,CAACG,MAAJ,KAAe,EAAnB,EAAuB;IACrB,IAAIC,GAAG,GAAG,CAAV;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACG,MAAJ,GAAa,CAAjC,EAAoCE,CAAC,EAArC,EAAyC;MACvC,IAAI,CAACN,OAAO,CAACG,IAAR,CAAaF,GAAG,CAACK,CAAD,CAAhB,CAAL,EAA2B;QACzB,IAAIC,aAAa,GAAG,KAAK,CAAzB;QACA,IAAIC,UAAU,GAAGP,GAAG,CAACQ,UAAJ,CAAeH,CAAf,IAAoB,EAArC;QACA,IAAIE,UAAU,GAAG,EAAjB,EAAqBD,aAAa,GAAGC,UAAhB,CAArB,KAAqD,IAAIA,UAAU,IAAI,EAAd,IAAoBA,UAAU,IAAI,EAAtC,EAA0CD,aAAa,GAAG,KAAKC,UAAU,GAAG,EAAlC,CAA1C,KAAoF,IAAIA,UAAU,IAAI,EAAd,IAAoBA,UAAU,IAAI,EAAtC,EAA0CD,aAAa,GAAG,KAAKC,UAAU,GAAG,EAAlC,CAA1C,KAAoFD,aAAa,GAAG,KAAKC,UAAU,GAAG,EAAlC;QAC7NH,GAAG,IAAIE,aAAa,GAAGG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,CAAZ,CAAvB;MACD,CALD,MAKOD,GAAG,IAAIJ,GAAG,CAACK,CAAD,CAAH,GAASI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,CAAZ,CAAhB;IACR;;IAED,IAAIM,aAAa,GAAGP,GAAG,GAAG,EAA1B;IACA,OAAOQ,MAAM,CAACZ,GAAG,CAACA,GAAG,CAACG,MAAJ,GAAa,CAAd,CAAJ,CAAN,KAAgCQ,aAAvC;EACD;;EAED,OAAO,IAAP;AACD;;AAED,IAAIpB,oBAAoB,GAAGD,SAA3B;AACAF,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}