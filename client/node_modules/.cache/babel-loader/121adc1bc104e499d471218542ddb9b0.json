{"ast":null,"code":"'use strict';\n\nmodule.exports = function base64(alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1;\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;\n  return {\n    encode(input) {\n      let output = '';\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64');\n      } else {\n        output = input.toString('base64');\n      }\n\n      if (url) {\n        output = output.replace('+', '-');\n        output = output.replace('/', '_');\n      }\n\n      const pad = output.indexOf('=');\n\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad);\n      }\n\n      return output;\n    },\n\n    decode(input) {\n      if (url) {\n        input = input.replace('+', '-');\n        input = input.replace('/', '_');\n      }\n\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character');\n        }\n      }\n\n      return Buffer.from(input, 'base64');\n    }\n\n  };\n};","map":{"version":3,"names":["module","exports","base64","alphabet","padding","indexOf","url","encode","input","output","Buffer","from","toString","replace","pad","substring","decode","char","Error"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/node_modules/multibase/src/base64.js"],"sourcesContent":["'use strict'\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace('+', '-')\n        output = output.replace('/', '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      if (url) {\n        input = input.replace('+', '-')\n        input = input.replace('/', '_')\n      }\n\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAiBC,QAAjB,EAA2B;EAC1C;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzC;EACA,MAAMC,GAAG,GAAGH,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzB,IAA8BF,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAnE;EAEA,OAAO;IACLE,MAAM,CAAEC,KAAF,EAAS;MACb,IAAIC,MAAM,GAAG,EAAb;;MAEA,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;QAC7BC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,QAAnB,CAA4B,QAA5B,CAAT;MACD,CAFD,MAEO;QACLH,MAAM,GAAGD,KAAK,CAACI,QAAN,CAAe,QAAf,CAAT;MACD;;MAED,IAAIN,GAAJ,EAAS;QACPG,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAe,GAAf,EAAoB,GAApB,CAAT;QACAJ,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAe,GAAf,EAAoB,GAApB,CAAT;MACD;;MAED,MAAMC,GAAG,GAAGL,MAAM,CAACJ,OAAP,CAAe,GAAf,CAAZ;;MACA,IAAIS,GAAG,GAAG,CAAN,IAAW,CAACV,OAAhB,EAAyB;QACvBK,MAAM,GAAGA,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBD,GAApB,CAAT;MACD;;MAED,OAAOL,MAAP;IACD,CArBI;;IAsBLO,MAAM,CAAER,KAAF,EAAS;MACb,IAAIF,GAAJ,EAAS;QACPE,KAAK,GAAGA,KAAK,CAACK,OAAN,CAAc,GAAd,EAAmB,GAAnB,CAAR;QACAL,KAAK,GAAGA,KAAK,CAACK,OAAN,CAAc,GAAd,EAAmB,GAAnB,CAAR;MACD;;MAED,KAAK,IAAII,IAAT,IAAiBT,KAAjB,EAAwB;QACtB,IAAIL,QAAQ,CAACE,OAAT,CAAiBY,IAAjB,IAAyB,CAA7B,EAAgC;UAC9B,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;QACD;MACF;;MAED,OAAOR,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmB,QAAnB,CAAP;IACD;;EAnCI,CAAP;AAqCD,CA9CD"},"metadata":{},"sourceType":"script"}