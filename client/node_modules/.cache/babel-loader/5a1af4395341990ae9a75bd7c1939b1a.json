{"ast":null,"code":"'use strict';\n\nconst isNode = require('detect-node');\n\nconst flatmap = require('flatmap');\n\nfunction loadPaths(opts, file) {\n  const path = require('path');\n\n  const fs = require('fs');\n\n  const glob = require('glob');\n\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true;\n  file = path.resolve(file);\n  const stats = fs.statSync(file);\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive');\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/');\n    const fullDir = file + (file.endsWith('/') ? '' : '/');\n    let dirName = fullDir.split('/');\n    dirName = dirName[dirName.length - 2] + '/';\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    });\n    return mg.found.map(name => {\n      const fqn = fullDir + name; // symlinks\n\n      if (mg.symlinks[fqn] === true) {\n        return {\n          path: dirName + name,\n          symlink: true,\n          dir: false,\n          content: fs.readlinkSync(fqn)\n        };\n      } // files\n\n\n      if (mg.cache[fqn] === 'FILE') {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: false,\n          content: fs.createReadStream(fqn)\n        };\n      } // directories\n\n\n      if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: true\n        };\n      } // files inside symlinks and others\n\n    }) // filter out null files\n    .filter(Boolean);\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  };\n}\n\nfunction prepareFile(file, opts) {\n  let files = [].concat(file);\n  return flatmap(files, file => {\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node');\n      }\n\n      return loadPaths(opts, file);\n    }\n\n    if (file.path && !file.content) {\n      file.dir = true;\n      return file;\n    }\n\n    if (file.content || file.dir) {\n      return file;\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: file\n    };\n  });\n}\n\nexports = module.exports = prepareFile;","map":{"version":3,"names":["isNode","require","flatmap","loadPaths","opts","file","path","fs","glob","followSymlinks","resolve","stats","statSync","isDirectory","recursive","Error","split","sep","join","fullDir","endsWith","dirName","length","mg","sync","GlobSync","cwd","follow","dot","hidden","ignore","found","map","name","fqn","symlinks","symlink","dir","content","readlinkSync","cache","createReadStream","Array","filter","Boolean","basename","prepareFile","files","concat","exports","module"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/src/utils/prepare-file.js"],"sourcesContent":["'use strict'\n\nconst isNode = require('detect-node')\nconst flatmap = require('flatmap')\n\nfunction loadPaths (opts, file) {\n  const path = require('path')\n  const fs = require('fs')\n  const glob = require('glob')\n\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true\n\n  file = path.resolve(file)\n  const stats = fs.statSync(file)\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive')\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/')\n    const fullDir = file + (file.endsWith('/') ? '' : '/')\n    let dirName = fullDir.split('/')\n    dirName = dirName[dirName.length - 2] + '/'\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    })\n\n    return mg.found\n      .map((name) => {\n        const fqn = fullDir + name\n        // symlinks\n        if (mg.symlinks[fqn] === true) {\n          return {\n            path: dirName + name,\n            symlink: true,\n            dir: false,\n            content: fs.readlinkSync(fqn)\n          }\n        }\n\n        // files\n        if (mg.cache[fqn] === 'FILE') {\n          return {\n            path: dirName + name,\n            symlink: false,\n            dir: false,\n            content: fs.createReadStream(fqn)\n          }\n        }\n\n        // directories\n        if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n          return {\n            path: dirName + name,\n            symlink: false,\n            dir: true\n          }\n        }\n        // files inside symlinks and others\n      })\n      // filter out null files\n      .filter(Boolean)\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  }\n}\n\nfunction prepareFile (file, opts) {\n  let files = [].concat(file)\n\n  return flatmap(files, (file) => {\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node')\n      }\n\n      return loadPaths(opts, file)\n    }\n\n    if (file.path && !file.content) {\n      file.dir = true\n      return file\n    }\n\n    if (file.content || file.dir) {\n      return file\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: file\n    }\n  })\n}\n\nexports = module.exports = prepareFile\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AAEA,SAASE,SAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;EAC9B,MAAMC,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;EACA,MAAMM,EAAE,GAAGN,OAAO,CAAC,IAAD,CAAlB;;EACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,MAAD,CAApB;;EAEA,MAAMQ,cAAc,GAAGL,IAAI,CAACK,cAAL,IAAuB,IAAvB,GAA8BL,IAAI,CAACK,cAAnC,GAAoD,IAA3E;EAEAJ,IAAI,GAAGC,IAAI,CAACI,OAAL,CAAaL,IAAb,CAAP;EACA,MAAMM,KAAK,GAAGJ,EAAE,CAACK,QAAH,CAAYP,IAAZ,CAAd;;EAEA,IAAIM,KAAK,CAACE,WAAN,MAAuB,CAACT,IAAI,CAACU,SAAjC,EAA4C;IAC1C,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;EACD;;EAED,IAAIJ,KAAK,CAACE,WAAN,MAAuBT,IAAI,CAACU,SAAhC,EAA2C;IACzC;IACAT,IAAI,GAAGA,IAAI,CAACW,KAAL,CAAWV,IAAI,CAACW,GAAhB,EAAqBC,IAArB,CAA0B,GAA1B,CAAP;IACA,MAAMC,OAAO,GAAGd,IAAI,IAAIA,IAAI,CAACe,QAAL,CAAc,GAAd,IAAqB,EAArB,GAA0B,GAA9B,CAApB;IACA,IAAIC,OAAO,GAAGF,OAAO,CAACH,KAAR,CAAc,GAAd,CAAd;IACAK,OAAO,GAAGA,OAAO,CAACA,OAAO,CAACC,MAAR,GAAiB,CAAlB,CAAP,GAA8B,GAAxC;IACA,MAAMC,EAAE,GAAG,IAAIf,IAAI,CAACgB,IAAL,CAAUC,QAAd,CAAuB,MAAvB,EAA+B;MACxCC,GAAG,EAAErB,IADmC;MAExCsB,MAAM,EAAElB,cAFgC;MAGxCmB,GAAG,EAAExB,IAAI,CAACyB,MAH8B;MAIxCC,MAAM,EAAE1B,IAAI,CAAC0B;IAJ2B,CAA/B,CAAX;IAOA,OAAOP,EAAE,CAACQ,KAAH,CACJC,GADI,CACCC,IAAD,IAAU;MACb,MAAMC,GAAG,GAAGf,OAAO,GAAGc,IAAtB,CADa,CAEb;;MACA,IAAIV,EAAE,CAACY,QAAH,CAAYD,GAAZ,MAAqB,IAAzB,EAA+B;QAC7B,OAAO;UACL5B,IAAI,EAAEe,OAAO,GAAGY,IADX;UAELG,OAAO,EAAE,IAFJ;UAGLC,GAAG,EAAE,KAHA;UAILC,OAAO,EAAE/B,EAAE,CAACgC,YAAH,CAAgBL,GAAhB;QAJJ,CAAP;MAMD,CAVY,CAYb;;;MACA,IAAIX,EAAE,CAACiB,KAAH,CAASN,GAAT,MAAkB,MAAtB,EAA8B;QAC5B,OAAO;UACL5B,IAAI,EAAEe,OAAO,GAAGY,IADX;UAELG,OAAO,EAAE,KAFJ;UAGLC,GAAG,EAAE,KAHA;UAILC,OAAO,EAAE/B,EAAE,CAACkC,gBAAH,CAAoBP,GAApB;QAJJ,CAAP;MAMD,CApBY,CAsBb;;;MACA,IAAIX,EAAE,CAACiB,KAAH,CAASN,GAAT,MAAkB,KAAlB,IAA2BX,EAAE,CAACiB,KAAH,CAASN,GAAT,aAAyBQ,KAAxD,EAA+D;QAC7D,OAAO;UACLpC,IAAI,EAAEe,OAAO,GAAGY,IADX;UAELG,OAAO,EAAE,KAFJ;UAGLC,GAAG,EAAE;QAHA,CAAP;MAKD,CA7BY,CA8Bb;;IACD,CAhCI,EAiCL;IAjCK,CAkCJM,MAlCI,CAkCGC,OAlCH,CAAP;EAmCD;;EAED,OAAO;IACLtC,IAAI,EAAEA,IAAI,CAACuC,QAAL,CAAcxC,IAAd,CADD;IAELiC,OAAO,EAAE/B,EAAE,CAACkC,gBAAH,CAAoBpC,IAApB;EAFJ,CAAP;AAID;;AAED,SAASyC,WAAT,CAAsBzC,IAAtB,EAA4BD,IAA5B,EAAkC;EAChC,IAAI2C,KAAK,GAAG,GAAGC,MAAH,CAAU3C,IAAV,CAAZ;EAEA,OAAOH,OAAO,CAAC6C,KAAD,EAAS1C,IAAD,IAAU;IAC9B,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC5B,IAAI,CAACL,MAAL,EAAa;QACX,MAAM,IAAIe,KAAJ,CAAU,iCAAV,CAAN;MACD;;MAED,OAAOZ,SAAS,CAACC,IAAD,EAAOC,IAAP,CAAhB;IACD;;IAED,IAAIA,IAAI,CAACC,IAAL,IAAa,CAACD,IAAI,CAACiC,OAAvB,EAAgC;MAC9BjC,IAAI,CAACgC,GAAL,GAAW,IAAX;MACA,OAAOhC,IAAP;IACD;;IAED,IAAIA,IAAI,CAACiC,OAAL,IAAgBjC,IAAI,CAACgC,GAAzB,EAA8B;MAC5B,OAAOhC,IAAP;IACD;;IAED,OAAO;MACLC,IAAI,EAAE,EADD;MAEL8B,OAAO,EAAE,KAFJ;MAGLC,GAAG,EAAE,KAHA;MAILC,OAAO,EAAEjC;IAJJ,CAAP;EAMD,CAxBa,CAAd;AAyBD;;AAED4C,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBH,WAA3B"},"metadata":{},"sourceType":"script"}