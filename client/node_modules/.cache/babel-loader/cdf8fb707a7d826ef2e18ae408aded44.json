{"ast":null,"code":"'use strict';\n\nconst forge = require('node-forge');\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\n\n\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\n\nfunction pbkdf2(password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash];\n\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`);\n  }\n\n  const dek = forge.pkcs5.pbkdf2(password, salt, iterations, keySize, hasher);\n  return forge.util.encode64(dek);\n}\n\nmodule.exports = pbkdf2;","map":{"version":3,"names":["forge","require","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","hasher","Error","dek","pkcs5","util","encode64","module","exports"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/node_modules/peer-info/node_modules/libp2p-crypto/src/pbkdf2.js"],"sourcesContent":["'use strict'\n\nconst forge = require('node-forge')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`)\n  }\n  const dek = forge.pkcs5.pbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forge.util.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,MADS;EAEf,YAAY,QAFG;EAGf,YAAY;AAHG,CAAjB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsDC,IAAtD,EAA4D;EAC1D,MAAMC,MAAM,GAAGR,QAAQ,CAACO,IAAD,CAAvB;;EACA,IAAI,CAACC,MAAL,EAAa;IACX,MAAM,IAAIC,KAAJ,CAAW,SAAQF,IAAK,+BAAxB,CAAN;EACD;;EACD,MAAMG,GAAG,GAAGZ,KAAK,CAACa,KAAN,CAAYT,MAAZ,CACVC,QADU,EAEVC,IAFU,EAGVC,UAHU,EAIVC,OAJU,EAKVE,MALU,CAAZ;EAMA,OAAOV,KAAK,CAACc,IAAN,CAAWC,QAAX,CAAoBH,GAApB,CAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBb,MAAjB"},"metadata":{},"sourceType":"script"}