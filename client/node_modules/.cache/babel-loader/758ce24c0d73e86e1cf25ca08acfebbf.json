{"ast":null,"code":"/**\n * Support for concurrent task management and synchronization in web\n * applications.\n *\n * @author Dave Longley\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2009-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./debug');\n\nrequire('./log');\n\nrequire('./util'); // logging category\n\n\nvar cat = 'forge.task'; // verbose level\n// 0: off, 1: a little, 2: a whole lot\n// Verbose debug logging is surrounded by a level check to avoid the\n// performance issues with even calling the logging code regardless if it\n// is actually logged.  For performance reasons this should not be set to 2\n// for production use.\n// ex: if(sVL >= 2) forge.log.verbose(....)\n\nvar sVL = 0; // track tasks for debugging\n\nvar sTasks = {};\nvar sNextTaskId = 0; // debug access\n\nforge.debug.set(cat, 'tasks', sTasks); // a map of task type to task queue\n\nvar sTaskQueues = {}; // debug access\n\nforge.debug.set(cat, 'queues', sTaskQueues); // name for unnamed tasks\n\nvar sNoTaskName = '?'; // maximum number of doNext() recursions before a context swap occurs\n// FIXME: might need to tweak this based on the browser\n\nvar sMaxRecursions = 30; // time slice for doing tasks before a context swap occurs\n// FIXME: might need to tweak this based on the browser\n\nvar sTimeSlice = 20;\n/**\n * Task states.\n *\n * READY: ready to start processing\n * RUNNING: task or a subtask is running\n * BLOCKED: task is waiting to acquire N permits to continue\n * SLEEPING: task is sleeping for a period of time\n * DONE: task is done\n * ERROR: task has an error\n */\n\nvar READY = 'ready';\nvar RUNNING = 'running';\nvar BLOCKED = 'blocked';\nvar SLEEPING = 'sleeping';\nvar DONE = 'done';\nvar ERROR = 'error';\n/**\n * Task actions.  Used to control state transitions.\n *\n * STOP: stop processing\n * START: start processing tasks\n * BLOCK: block task from continuing until 1 or more permits are released\n * UNBLOCK: release one or more permits\n * SLEEP: sleep for a period of time\n * WAKEUP: wakeup early from SLEEPING state\n * CANCEL: cancel further tasks\n * FAIL: a failure occured\n */\n\nvar STOP = 'stop';\nvar START = 'start';\nvar BLOCK = 'block';\nvar UNBLOCK = 'unblock';\nvar SLEEP = 'sleep';\nvar WAKEUP = 'wakeup';\nvar CANCEL = 'cancel';\nvar FAIL = 'fail';\n/**\n * State transition table.\n *\n * nextState = sStateTable[currentState][action]\n */\n\nvar sStateTable = {};\nsStateTable[READY] = {};\nsStateTable[READY][STOP] = READY;\nsStateTable[READY][START] = RUNNING;\nsStateTable[READY][CANCEL] = DONE;\nsStateTable[READY][FAIL] = ERROR;\nsStateTable[RUNNING] = {};\nsStateTable[RUNNING][STOP] = READY;\nsStateTable[RUNNING][START] = RUNNING;\nsStateTable[RUNNING][BLOCK] = BLOCKED;\nsStateTable[RUNNING][UNBLOCK] = RUNNING;\nsStateTable[RUNNING][SLEEP] = SLEEPING;\nsStateTable[RUNNING][WAKEUP] = RUNNING;\nsStateTable[RUNNING][CANCEL] = DONE;\nsStateTable[RUNNING][FAIL] = ERROR;\nsStateTable[BLOCKED] = {};\nsStateTable[BLOCKED][STOP] = BLOCKED;\nsStateTable[BLOCKED][START] = BLOCKED;\nsStateTable[BLOCKED][BLOCK] = BLOCKED;\nsStateTable[BLOCKED][UNBLOCK] = BLOCKED;\nsStateTable[BLOCKED][SLEEP] = BLOCKED;\nsStateTable[BLOCKED][WAKEUP] = BLOCKED;\nsStateTable[BLOCKED][CANCEL] = DONE;\nsStateTable[BLOCKED][FAIL] = ERROR;\nsStateTable[SLEEPING] = {};\nsStateTable[SLEEPING][STOP] = SLEEPING;\nsStateTable[SLEEPING][START] = SLEEPING;\nsStateTable[SLEEPING][BLOCK] = SLEEPING;\nsStateTable[SLEEPING][UNBLOCK] = SLEEPING;\nsStateTable[SLEEPING][SLEEP] = SLEEPING;\nsStateTable[SLEEPING][WAKEUP] = SLEEPING;\nsStateTable[SLEEPING][CANCEL] = DONE;\nsStateTable[SLEEPING][FAIL] = ERROR;\nsStateTable[DONE] = {};\nsStateTable[DONE][STOP] = DONE;\nsStateTable[DONE][START] = DONE;\nsStateTable[DONE][BLOCK] = DONE;\nsStateTable[DONE][UNBLOCK] = DONE;\nsStateTable[DONE][SLEEP] = DONE;\nsStateTable[DONE][WAKEUP] = DONE;\nsStateTable[DONE][CANCEL] = DONE;\nsStateTable[DONE][FAIL] = ERROR;\nsStateTable[ERROR] = {};\nsStateTable[ERROR][STOP] = ERROR;\nsStateTable[ERROR][START] = ERROR;\nsStateTable[ERROR][BLOCK] = ERROR;\nsStateTable[ERROR][UNBLOCK] = ERROR;\nsStateTable[ERROR][SLEEP] = ERROR;\nsStateTable[ERROR][WAKEUP] = ERROR;\nsStateTable[ERROR][CANCEL] = ERROR;\nsStateTable[ERROR][FAIL] = ERROR;\n/**\n * Creates a new task.\n *\n * @param options options for this task\n *   run: the run function for the task (required)\n *   name: the run function for the task (optional)\n *   parent: parent of this task (optional)\n *\n * @return the empty task.\n */\n\nvar Task = function (options) {\n  // task id\n  this.id = -1; // task name\n\n  this.name = options.name || sNoTaskName; // task has no parent\n\n  this.parent = options.parent || null; // save run function\n\n  this.run = options.run; // create a queue of subtasks to run\n\n  this.subtasks = []; // error flag\n\n  this.error = false; // state of the task\n\n  this.state = READY; // number of times the task has been blocked (also the number\n  // of permits needed to be released to continue running)\n\n  this.blocks = 0; // timeout id when sleeping\n\n  this.timeoutId = null; // no swap time yet\n\n  this.swapTime = null; // no user data\n\n  this.userData = null; // initialize task\n  // FIXME: deal with overflow\n\n  this.id = sNextTaskId++;\n  sTasks[this.id] = this;\n\n  if (sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);\n  }\n};\n/**\n * Logs debug information on this task and the system state.\n */\n\n\nTask.prototype.debug = function (msg) {\n  msg = msg || '';\n  forge.log.debug(cat, msg, '[%s][%s] task:', this.id, this.name, this, 'subtasks:', this.subtasks.length, 'queue:', sTaskQueues);\n};\n/**\n * Adds a subtask to run after task.doNext() or task.fail() is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun a function to run that takes the current task as\n *          its first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\n\n\nTask.prototype.next = function (name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if (typeof name === 'function') {\n    subrun = name; // inherit parent's name\n\n    name = this.name;\n  } // create subtask, set parent to this task, propagate callbacks\n\n\n  var subtask = new Task({\n    run: subrun,\n    name: name,\n    parent: this\n  }); // start subtasks running\n\n  subtask.state = RUNNING;\n  subtask.type = this.type;\n  subtask.successCallback = this.successCallback || null;\n  subtask.failureCallback = this.failureCallback || null; // queue a new subtask\n\n  this.subtasks.push(subtask);\n  return this;\n};\n/**\n * Adds subtasks to run in parallel after task.doNext() or task.fail()\n * is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun functions to run that take the current task as\n *          their first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\n\n\nTask.prototype.parallel = function (name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if (forge.util.isArray(name)) {\n    subrun = name; // inherit parent's name\n\n    name = this.name;\n  } // Wrap parallel tasks in a regular task so they are started at the\n  // proper time.\n\n\n  return this.next(name, function (task) {\n    // block waiting for subtasks\n    var ptask = task;\n    ptask.block(subrun.length); // we pass the iterator from the loop below as a parameter\n    // to a function because it is otherwise included in the\n    // closure and changes as the loop changes -- causing i\n    // to always be set to its highest value\n\n    var startParallelTask = function (pname, pi) {\n      forge.task.start({\n        type: pname,\n        run: function (task) {\n          subrun[pi](task);\n        },\n        success: function (task) {\n          ptask.unblock();\n        },\n        failure: function (task) {\n          ptask.unblock();\n        }\n      });\n    };\n\n    for (var i = 0; i < subrun.length; i++) {\n      // Type must be unique so task starts in parallel:\n      //    name + private string + task id + sub-task index\n      // start tasks in parallel and unblock when the finish\n      var pname = name + '__parallel-' + task.id + '-' + i;\n      var pi = i;\n      startParallelTask(pname, pi);\n    }\n  });\n};\n/**\n * Stops a running task.\n */\n\n\nTask.prototype.stop = function () {\n  this.state = sStateTable[this.state][STOP];\n};\n/**\n * Starts running a task.\n */\n\n\nTask.prototype.start = function () {\n  this.error = false;\n  this.state = sStateTable[this.state][START]; // try to restart\n\n  if (this.state === RUNNING) {\n    this.start = new Date();\n    this.run(this);\n    runNext(this, 0);\n  }\n};\n/**\n * Blocks a task until it one or more permits have been released. The\n * task will not resume until the requested number of permits have\n * been released with call(s) to unblock().\n *\n * @param n number of permits to wait for(default: 1).\n */\n\n\nTask.prototype.block = function (n) {\n  n = typeof n === 'undefined' ? 1 : n;\n  this.blocks += n;\n\n  if (this.blocks > 0) {\n    this.state = sStateTable[this.state][BLOCK];\n  }\n};\n/**\n * Releases a permit to unblock a task. If a task was blocked by\n * requesting N permits via block(), then it will only continue\n * running once enough permits have been released via unblock() calls.\n *\n * If multiple processes need to synchronize with a single task then\n * use a condition variable (see forge.task.createCondition). It is\n * an error to unblock a task more times than it has been blocked.\n *\n * @param n number of permits to release (default: 1).\n *\n * @return the current block count (task is unblocked when count is 0)\n */\n\n\nTask.prototype.unblock = function (n) {\n  n = typeof n === 'undefined' ? 1 : n;\n  this.blocks -= n;\n\n  if (this.blocks === 0 && this.state !== DONE) {\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n\n  return this.blocks;\n};\n/**\n * Sleep for a period of time before resuming tasks.\n *\n * @param n number of milliseconds to sleep (default: 0).\n */\n\n\nTask.prototype.sleep = function (n) {\n  n = typeof n === 'undefined' ? 0 : n;\n  this.state = sStateTable[this.state][SLEEP];\n  var self = this;\n  this.timeoutId = setTimeout(function () {\n    self.timeoutId = null;\n    self.state = RUNNING;\n    runNext(self, 0);\n  }, n);\n};\n/**\n * Waits on a condition variable until notified. The next task will\n * not be scheduled until notification. A condition variable can be\n * created with forge.task.createCondition().\n *\n * Once cond.notify() is called, the task will continue.\n *\n * @param cond the condition variable to wait on.\n */\n\n\nTask.prototype.wait = function (cond) {\n  cond.wait(this);\n};\n/**\n * If sleeping, wakeup and continue running tasks.\n */\n\n\nTask.prototype.wakeup = function () {\n  if (this.state === SLEEPING) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n};\n/**\n * Cancel all remaining subtasks of this task.\n */\n\n\nTask.prototype.cancel = function () {\n  this.state = sStateTable[this.state][CANCEL]; // remove permits needed\n\n  this.permitsNeeded = 0; // cancel timeouts\n\n  if (this.timeoutId !== null) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n  } // remove subtasks\n\n\n  this.subtasks = [];\n};\n/**\n * Finishes this task with failure and sets error flag. The entire\n * task will be aborted unless the next task that should execute\n * is passed as a parameter. This allows levels of subtasks to be\n * skipped. For instance, to abort only this tasks's subtasks, then\n * call fail(task.parent). To abort this task's subtasks and its\n * parent's subtasks, call fail(task.parent.parent). To abort\n * all tasks and simply call the task callback, call fail() or\n * fail(null).\n *\n * The task callback (success or failure) will always, eventually, be\n * called.\n *\n * @param next the task to continue at, or null to abort entirely.\n */\n\n\nTask.prototype.fail = function (next) {\n  // set error flag\n  this.error = true; // finish task\n\n  finish(this, true);\n\n  if (next) {\n    // propagate task info\n    next.error = this.error;\n    next.swapTime = this.swapTime;\n    next.userData = this.userData; // do next task as specified\n\n    runNext(next, 0);\n  } else {\n    if (this.parent !== null) {\n      // finish root task (ensures it is removed from task queue)\n      var parent = this.parent;\n\n      while (parent.parent !== null) {\n        // propagate task info\n        parent.error = this.error;\n        parent.swapTime = this.swapTime;\n        parent.userData = this.userData;\n        parent = parent.parent;\n      }\n\n      finish(parent, true);\n    } // call failure callback if one exists\n\n\n    if (this.failureCallback) {\n      this.failureCallback(this);\n    }\n  }\n};\n/**\n * Asynchronously start a task.\n *\n * @param task the task to start.\n */\n\n\nvar start = function (task) {\n  task.error = false;\n  task.state = sStateTable[task.state][START];\n  setTimeout(function () {\n    if (task.state === RUNNING) {\n      task.swapTime = +new Date();\n      task.run(task);\n      runNext(task, 0);\n    }\n  }, 0);\n};\n/**\n * Run the next subtask or finish this task.\n *\n * @param task the task to process.\n * @param recurse the recursion count.\n */\n\n\nvar runNext = function (task, recurse) {\n  // get time since last context swap (ms), if enough time has passed set\n  // swap to true to indicate that doNext was performed asynchronously\n  // also, if recurse is too high do asynchronously\n  var swap = recurse > sMaxRecursions || +new Date() - task.swapTime > sTimeSlice;\n\n  var doNext = function (recurse) {\n    recurse++;\n\n    if (task.state === RUNNING) {\n      if (swap) {\n        // update swap time\n        task.swapTime = +new Date();\n      }\n\n      if (task.subtasks.length > 0) {\n        // run next subtask\n        var subtask = task.subtasks.shift();\n        subtask.error = task.error;\n        subtask.swapTime = task.swapTime;\n        subtask.userData = task.userData;\n        subtask.run(subtask);\n\n        if (!subtask.error) {\n          runNext(subtask, recurse);\n        }\n      } else {\n        finish(task);\n\n        if (!task.error) {\n          // chain back up and run parent\n          if (task.parent !== null) {\n            // propagate task info\n            task.parent.error = task.error;\n            task.parent.swapTime = task.swapTime;\n            task.parent.userData = task.userData; // no subtasks left, call run next subtask on parent\n\n            runNext(task.parent, recurse);\n          }\n        }\n      }\n    }\n  };\n\n  if (swap) {\n    // we're swapping, so run asynchronously\n    setTimeout(doNext, 0);\n  } else {\n    // not swapping, so run synchronously\n    doNext(recurse);\n  }\n};\n/**\n * Finishes a task and looks for the next task in the queue to start.\n *\n * @param task the task to finish.\n * @param suppressCallbacks true to suppress callbacks.\n */\n\n\nvar finish = function (task, suppressCallbacks) {\n  // subtask is now done\n  task.state = DONE;\n  delete sTasks[task.id];\n\n  if (sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] finish', task.id, task.name, task);\n  } // only do queue processing for root tasks\n\n\n  if (task.parent === null) {\n    // report error if queue is missing\n    if (!(task.type in sTaskQueues)) {\n      forge.log.error(cat, '[%s][%s] task queue missing [%s]', task.id, task.name, task.type);\n    } else if (sTaskQueues[task.type].length === 0) {\n      // report error if queue is empty\n      forge.log.error(cat, '[%s][%s] task queue empty [%s]', task.id, task.name, task.type);\n    } else if (sTaskQueues[task.type][0] !== task) {\n      // report error if this task isn't the first in the queue\n      forge.log.error(cat, '[%s][%s] task not first in queue [%s]', task.id, task.name, task.type);\n    } else {\n      // remove ourselves from the queue\n      sTaskQueues[task.type].shift(); // clean up queue if it is empty\n\n      if (sTaskQueues[task.type].length === 0) {\n        if (sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] delete queue [%s]', task.id, task.name, task.type);\n        }\n        /* Note: Only a task can delete a queue of its own type. This\n         is used as a way to synchronize tasks. If a queue for a certain\n         task type exists, then a task of that type is running.\n         */\n\n\n        delete sTaskQueues[task.type];\n      } else {\n        // dequeue the next task and start it\n        if (sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] queue start next [%s] remain:%s', task.id, task.name, task.type, sTaskQueues[task.type].length);\n        }\n\n        sTaskQueues[task.type][0].start();\n      }\n    }\n\n    if (!suppressCallbacks) {\n      // call final callback if one exists\n      if (task.error && task.failureCallback) {\n        task.failureCallback(task);\n      } else if (!task.error && task.successCallback) {\n        task.successCallback(task);\n      }\n    }\n  }\n};\n/* Tasks API */\n\n\nmodule.exports = forge.task = forge.task || {};\n/**\n * Starts a new task that will run the passed function asynchronously.\n *\n * In order to finish the task, either task.doNext() or task.fail()\n * *must* be called.\n *\n * The task must have a type (a string identifier) that can be used to\n * synchronize it with other tasks of the same type. That type can also\n * be used to cancel tasks that haven't started yet.\n *\n * To start a task, the following object must be provided as a parameter\n * (each function takes a task object as its first parameter):\n *\n * {\n *   type: the type of task.\n *   run: the function to run to execute the task.\n *   success: a callback to call when the task succeeds (optional).\n *   failure: a callback to call when the task fails (optional).\n * }\n *\n * @param options the object as described above.\n */\n\nforge.task.start = function (options) {\n  // create a new task\n  var task = new Task({\n    run: options.run,\n    name: options.name || sNoTaskName\n  });\n  task.type = options.type;\n  task.successCallback = options.success || null;\n  task.failureCallback = options.failure || null; // append the task onto the appropriate queue\n\n  if (!(task.type in sTaskQueues)) {\n    if (sVL >= 1) {\n      forge.log.verbose(cat, '[%s][%s] create queue [%s]', task.id, task.name, task.type);\n    } // create the queue with the new task\n\n\n    sTaskQueues[task.type] = [task];\n    start(task);\n  } else {\n    // push the task onto the queue, it will be run after a task\n    // with the same type completes\n    sTaskQueues[options.type].push(task);\n  }\n};\n/**\n * Cancels all tasks of the given type that haven't started yet.\n *\n * @param type the type of task to cancel.\n */\n\n\nforge.task.cancel = function (type) {\n  // find the task queue\n  if (type in sTaskQueues) {\n    // empty all but the current task from the queue\n    sTaskQueues[type] = [sTaskQueues[type][0]];\n  }\n};\n/**\n * Creates a condition variable to synchronize tasks. To make a task wait\n * on the condition variable, call task.wait(condition). To notify all\n * tasks that are waiting, call condition.notify().\n *\n * @return the condition variable.\n */\n\n\nforge.task.createCondition = function () {\n  var cond = {\n    // all tasks that are blocked\n    tasks: {}\n  };\n  /**\n   * Causes the given task to block until notify is called. If the task\n   * is already waiting on this condition then this is a no-op.\n   *\n   * @param task the task to cause to wait.\n   */\n\n  cond.wait = function (task) {\n    // only block once\n    if (!(task.id in cond.tasks)) {\n      task.block();\n      cond.tasks[task.id] = task;\n    }\n  };\n  /**\n   * Notifies all waiting tasks to wake up.\n   */\n\n\n  cond.notify = function () {\n    // since unblock() will run the next task from here, make sure to\n    // clear the condition's blocked task list before unblocking\n    var tmp = cond.tasks;\n    cond.tasks = {};\n\n    for (var id in tmp) {\n      tmp[id].unblock();\n    }\n  };\n\n  return cond;\n};","map":{"version":3,"names":["forge","require","cat","sVL","sTasks","sNextTaskId","debug","set","sTaskQueues","sNoTaskName","sMaxRecursions","sTimeSlice","READY","RUNNING","BLOCKED","SLEEPING","DONE","ERROR","STOP","START","BLOCK","UNBLOCK","SLEEP","WAKEUP","CANCEL","FAIL","sStateTable","Task","options","id","name","parent","run","subtasks","error","state","blocks","timeoutId","swapTime","userData","log","verbose","prototype","msg","length","next","subrun","subtask","type","successCallback","failureCallback","push","parallel","util","isArray","task","ptask","block","startParallelTask","pname","pi","start","success","unblock","failure","i","stop","Date","runNext","n","sleep","self","setTimeout","wait","cond","wakeup","cancelTimeout","cancel","permitsNeeded","fail","finish","recurse","swap","doNext","shift","suppressCallbacks","module","exports","createCondition","tasks","notify","tmp"],"sources":["R:/New_Block/client/node_modules/ipfs-api/node_modules/node-forge/lib/task.js"],"sourcesContent":["/**\n * Support for concurrent task management and synchronization in web\n * applications.\n *\n * @author Dave Longley\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2009-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./debug');\nrequire('./log');\nrequire('./util');\n\n// logging category\nvar cat = 'forge.task';\n\n// verbose level\n// 0: off, 1: a little, 2: a whole lot\n// Verbose debug logging is surrounded by a level check to avoid the\n// performance issues with even calling the logging code regardless if it\n// is actually logged.  For performance reasons this should not be set to 2\n// for production use.\n// ex: if(sVL >= 2) forge.log.verbose(....)\nvar sVL = 0;\n\n// track tasks for debugging\nvar sTasks = {};\nvar sNextTaskId = 0;\n// debug access\nforge.debug.set(cat, 'tasks', sTasks);\n\n// a map of task type to task queue\nvar sTaskQueues = {};\n// debug access\nforge.debug.set(cat, 'queues', sTaskQueues);\n\n// name for unnamed tasks\nvar sNoTaskName = '?';\n\n// maximum number of doNext() recursions before a context swap occurs\n// FIXME: might need to tweak this based on the browser\nvar sMaxRecursions = 30;\n\n// time slice for doing tasks before a context swap occurs\n// FIXME: might need to tweak this based on the browser\nvar sTimeSlice = 20;\n\n/**\n * Task states.\n *\n * READY: ready to start processing\n * RUNNING: task or a subtask is running\n * BLOCKED: task is waiting to acquire N permits to continue\n * SLEEPING: task is sleeping for a period of time\n * DONE: task is done\n * ERROR: task has an error\n */\nvar READY = 'ready';\nvar RUNNING = 'running';\nvar BLOCKED = 'blocked';\nvar SLEEPING = 'sleeping';\nvar DONE = 'done';\nvar ERROR = 'error';\n\n/**\n * Task actions.  Used to control state transitions.\n *\n * STOP: stop processing\n * START: start processing tasks\n * BLOCK: block task from continuing until 1 or more permits are released\n * UNBLOCK: release one or more permits\n * SLEEP: sleep for a period of time\n * WAKEUP: wakeup early from SLEEPING state\n * CANCEL: cancel further tasks\n * FAIL: a failure occured\n */\nvar STOP = 'stop';\nvar START = 'start';\nvar BLOCK = 'block';\nvar UNBLOCK = 'unblock';\nvar SLEEP = 'sleep';\nvar WAKEUP = 'wakeup';\nvar CANCEL = 'cancel';\nvar FAIL = 'fail';\n\n/**\n * State transition table.\n *\n * nextState = sStateTable[currentState][action]\n */\nvar sStateTable = {};\n\nsStateTable[READY] = {};\nsStateTable[READY][STOP] = READY;\nsStateTable[READY][START] = RUNNING;\nsStateTable[READY][CANCEL] = DONE;\nsStateTable[READY][FAIL] = ERROR;\n\nsStateTable[RUNNING] = {};\nsStateTable[RUNNING][STOP] = READY;\nsStateTable[RUNNING][START] = RUNNING;\nsStateTable[RUNNING][BLOCK] = BLOCKED;\nsStateTable[RUNNING][UNBLOCK] = RUNNING;\nsStateTable[RUNNING][SLEEP] = SLEEPING;\nsStateTable[RUNNING][WAKEUP] = RUNNING;\nsStateTable[RUNNING][CANCEL] = DONE;\nsStateTable[RUNNING][FAIL] = ERROR;\n\nsStateTable[BLOCKED] = {};\nsStateTable[BLOCKED][STOP] = BLOCKED;\nsStateTable[BLOCKED][START] = BLOCKED;\nsStateTable[BLOCKED][BLOCK] = BLOCKED;\nsStateTable[BLOCKED][UNBLOCK] = BLOCKED;\nsStateTable[BLOCKED][SLEEP] = BLOCKED;\nsStateTable[BLOCKED][WAKEUP] = BLOCKED;\nsStateTable[BLOCKED][CANCEL] = DONE;\nsStateTable[BLOCKED][FAIL] = ERROR;\n\nsStateTable[SLEEPING] = {};\nsStateTable[SLEEPING][STOP] = SLEEPING;\nsStateTable[SLEEPING][START] = SLEEPING;\nsStateTable[SLEEPING][BLOCK] = SLEEPING;\nsStateTable[SLEEPING][UNBLOCK] = SLEEPING;\nsStateTable[SLEEPING][SLEEP] = SLEEPING;\nsStateTable[SLEEPING][WAKEUP] = SLEEPING;\nsStateTable[SLEEPING][CANCEL] = DONE;\nsStateTable[SLEEPING][FAIL] = ERROR;\n\nsStateTable[DONE] = {};\nsStateTable[DONE][STOP] = DONE;\nsStateTable[DONE][START] = DONE;\nsStateTable[DONE][BLOCK] = DONE;\nsStateTable[DONE][UNBLOCK] = DONE;\nsStateTable[DONE][SLEEP] = DONE;\nsStateTable[DONE][WAKEUP] = DONE;\nsStateTable[DONE][CANCEL] = DONE;\nsStateTable[DONE][FAIL] = ERROR;\n\nsStateTable[ERROR] = {};\nsStateTable[ERROR][STOP] = ERROR;\nsStateTable[ERROR][START] = ERROR;\nsStateTable[ERROR][BLOCK] = ERROR;\nsStateTable[ERROR][UNBLOCK] = ERROR;\nsStateTable[ERROR][SLEEP] = ERROR;\nsStateTable[ERROR][WAKEUP] = ERROR;\nsStateTable[ERROR][CANCEL] = ERROR;\nsStateTable[ERROR][FAIL] = ERROR;\n\n/**\n * Creates a new task.\n *\n * @param options options for this task\n *   run: the run function for the task (required)\n *   name: the run function for the task (optional)\n *   parent: parent of this task (optional)\n *\n * @return the empty task.\n */\nvar Task = function(options) {\n  // task id\n  this.id = -1;\n\n  // task name\n  this.name = options.name || sNoTaskName;\n\n  // task has no parent\n  this.parent = options.parent || null;\n\n  // save run function\n  this.run = options.run;\n\n  // create a queue of subtasks to run\n  this.subtasks = [];\n\n  // error flag\n  this.error = false;\n\n  // state of the task\n  this.state = READY;\n\n  // number of times the task has been blocked (also the number\n  // of permits needed to be released to continue running)\n  this.blocks = 0;\n\n  // timeout id when sleeping\n  this.timeoutId = null;\n\n  // no swap time yet\n  this.swapTime = null;\n\n  // no user data\n  this.userData = null;\n\n  // initialize task\n  // FIXME: deal with overflow\n  this.id = sNextTaskId++;\n  sTasks[this.id] = this;\n  if(sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);\n  }\n};\n\n/**\n * Logs debug information on this task and the system state.\n */\nTask.prototype.debug = function(msg) {\n  msg = msg || '';\n  forge.log.debug(cat, msg,\n    '[%s][%s] task:', this.id, this.name, this,\n    'subtasks:', this.subtasks.length,\n    'queue:', sTaskQueues);\n};\n\n/**\n * Adds a subtask to run after task.doNext() or task.fail() is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun a function to run that takes the current task as\n *          its first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\nTask.prototype.next = function(name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if(typeof(name) === 'function') {\n    subrun = name;\n\n    // inherit parent's name\n    name = this.name;\n  }\n  // create subtask, set parent to this task, propagate callbacks\n  var subtask = new Task({\n    run: subrun,\n    name: name,\n    parent: this\n  });\n  // start subtasks running\n  subtask.state = RUNNING;\n  subtask.type = this.type;\n  subtask.successCallback = this.successCallback || null;\n  subtask.failureCallback = this.failureCallback || null;\n\n  // queue a new subtask\n  this.subtasks.push(subtask);\n\n  return this;\n};\n\n/**\n * Adds subtasks to run in parallel after task.doNext() or task.fail()\n * is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun functions to run that take the current task as\n *          their first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\nTask.prototype.parallel = function(name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if(forge.util.isArray(name)) {\n    subrun = name;\n\n    // inherit parent's name\n    name = this.name;\n  }\n  // Wrap parallel tasks in a regular task so they are started at the\n  // proper time.\n  return this.next(name, function(task) {\n    // block waiting for subtasks\n    var ptask = task;\n    ptask.block(subrun.length);\n\n    // we pass the iterator from the loop below as a parameter\n    // to a function because it is otherwise included in the\n    // closure and changes as the loop changes -- causing i\n    // to always be set to its highest value\n    var startParallelTask = function(pname, pi) {\n      forge.task.start({\n        type: pname,\n        run: function(task) {\n           subrun[pi](task);\n        },\n        success: function(task) {\n           ptask.unblock();\n        },\n        failure: function(task) {\n           ptask.unblock();\n        }\n      });\n    };\n\n    for(var i = 0; i < subrun.length; i++) {\n      // Type must be unique so task starts in parallel:\n      //    name + private string + task id + sub-task index\n      // start tasks in parallel and unblock when the finish\n      var pname = name + '__parallel-' + task.id + '-' + i;\n      var pi = i;\n      startParallelTask(pname, pi);\n    }\n  });\n};\n\n/**\n * Stops a running task.\n */\nTask.prototype.stop = function() {\n  this.state = sStateTable[this.state][STOP];\n};\n\n/**\n * Starts running a task.\n */\nTask.prototype.start = function() {\n  this.error = false;\n  this.state = sStateTable[this.state][START];\n\n  // try to restart\n  if(this.state === RUNNING) {\n    this.start = new Date();\n    this.run(this);\n    runNext(this, 0);\n  }\n};\n\n/**\n * Blocks a task until it one or more permits have been released. The\n * task will not resume until the requested number of permits have\n * been released with call(s) to unblock().\n *\n * @param n number of permits to wait for(default: 1).\n */\nTask.prototype.block = function(n) {\n  n = typeof(n) === 'undefined' ? 1 : n;\n  this.blocks += n;\n  if(this.blocks > 0) {\n    this.state = sStateTable[this.state][BLOCK];\n  }\n};\n\n/**\n * Releases a permit to unblock a task. If a task was blocked by\n * requesting N permits via block(), then it will only continue\n * running once enough permits have been released via unblock() calls.\n *\n * If multiple processes need to synchronize with a single task then\n * use a condition variable (see forge.task.createCondition). It is\n * an error to unblock a task more times than it has been blocked.\n *\n * @param n number of permits to release (default: 1).\n *\n * @return the current block count (task is unblocked when count is 0)\n */\nTask.prototype.unblock = function(n) {\n  n = typeof(n) === 'undefined' ? 1 : n;\n  this.blocks -= n;\n  if(this.blocks === 0 && this.state !== DONE) {\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n  return this.blocks;\n};\n\n/**\n * Sleep for a period of time before resuming tasks.\n *\n * @param n number of milliseconds to sleep (default: 0).\n */\nTask.prototype.sleep = function(n) {\n  n = typeof(n) === 'undefined' ? 0 : n;\n  this.state = sStateTable[this.state][SLEEP];\n  var self = this;\n  this.timeoutId = setTimeout(function() {\n    self.timeoutId = null;\n    self.state = RUNNING;\n    runNext(self, 0);\n  }, n);\n};\n\n/**\n * Waits on a condition variable until notified. The next task will\n * not be scheduled until notification. A condition variable can be\n * created with forge.task.createCondition().\n *\n * Once cond.notify() is called, the task will continue.\n *\n * @param cond the condition variable to wait on.\n */\nTask.prototype.wait = function(cond) {\n  cond.wait(this);\n};\n\n/**\n * If sleeping, wakeup and continue running tasks.\n */\nTask.prototype.wakeup = function() {\n  if(this.state === SLEEPING) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n};\n\n/**\n * Cancel all remaining subtasks of this task.\n */\nTask.prototype.cancel = function() {\n  this.state = sStateTable[this.state][CANCEL];\n  // remove permits needed\n  this.permitsNeeded = 0;\n  // cancel timeouts\n  if(this.timeoutId !== null) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n  }\n  // remove subtasks\n  this.subtasks = [];\n};\n\n/**\n * Finishes this task with failure and sets error flag. The entire\n * task will be aborted unless the next task that should execute\n * is passed as a parameter. This allows levels of subtasks to be\n * skipped. For instance, to abort only this tasks's subtasks, then\n * call fail(task.parent). To abort this task's subtasks and its\n * parent's subtasks, call fail(task.parent.parent). To abort\n * all tasks and simply call the task callback, call fail() or\n * fail(null).\n *\n * The task callback (success or failure) will always, eventually, be\n * called.\n *\n * @param next the task to continue at, or null to abort entirely.\n */\nTask.prototype.fail = function(next) {\n  // set error flag\n  this.error = true;\n\n  // finish task\n  finish(this, true);\n\n  if(next) {\n    // propagate task info\n    next.error = this.error;\n    next.swapTime = this.swapTime;\n    next.userData = this.userData;\n\n    // do next task as specified\n    runNext(next, 0);\n  } else {\n    if(this.parent !== null) {\n      // finish root task (ensures it is removed from task queue)\n      var parent = this.parent;\n      while(parent.parent !== null) {\n        // propagate task info\n        parent.error = this.error;\n        parent.swapTime = this.swapTime;\n        parent.userData = this.userData;\n        parent = parent.parent;\n      }\n      finish(parent, true);\n    }\n\n    // call failure callback if one exists\n    if(this.failureCallback) {\n      this.failureCallback(this);\n    }\n  }\n};\n\n/**\n * Asynchronously start a task.\n *\n * @param task the task to start.\n */\nvar start = function(task) {\n  task.error = false;\n  task.state = sStateTable[task.state][START];\n  setTimeout(function() {\n    if(task.state === RUNNING) {\n      task.swapTime = +new Date();\n      task.run(task);\n      runNext(task, 0);\n    }\n  }, 0);\n};\n\n/**\n * Run the next subtask or finish this task.\n *\n * @param task the task to process.\n * @param recurse the recursion count.\n */\nvar runNext = function(task, recurse) {\n  // get time since last context swap (ms), if enough time has passed set\n  // swap to true to indicate that doNext was performed asynchronously\n  // also, if recurse is too high do asynchronously\n  var swap =\n    (recurse > sMaxRecursions) ||\n    (+new Date() - task.swapTime) > sTimeSlice;\n\n  var doNext = function(recurse) {\n    recurse++;\n    if(task.state === RUNNING) {\n      if(swap) {\n        // update swap time\n        task.swapTime = +new Date();\n      }\n\n      if(task.subtasks.length > 0) {\n        // run next subtask\n        var subtask = task.subtasks.shift();\n        subtask.error = task.error;\n        subtask.swapTime = task.swapTime;\n        subtask.userData = task.userData;\n        subtask.run(subtask);\n        if(!subtask.error) {\n           runNext(subtask, recurse);\n        }\n      } else {\n        finish(task);\n\n        if(!task.error) {\n          // chain back up and run parent\n          if(task.parent !== null) {\n            // propagate task info\n            task.parent.error = task.error;\n            task.parent.swapTime = task.swapTime;\n            task.parent.userData = task.userData;\n\n            // no subtasks left, call run next subtask on parent\n            runNext(task.parent, recurse);\n          }\n        }\n      }\n    }\n  };\n\n  if(swap) {\n    // we're swapping, so run asynchronously\n    setTimeout(doNext, 0);\n  } else {\n    // not swapping, so run synchronously\n    doNext(recurse);\n  }\n};\n\n/**\n * Finishes a task and looks for the next task in the queue to start.\n *\n * @param task the task to finish.\n * @param suppressCallbacks true to suppress callbacks.\n */\nvar finish = function(task, suppressCallbacks) {\n  // subtask is now done\n  task.state = DONE;\n\n  delete sTasks[task.id];\n  if(sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] finish',\n      task.id, task.name, task);\n  }\n\n  // only do queue processing for root tasks\n  if(task.parent === null) {\n    // report error if queue is missing\n    if(!(task.type in sTaskQueues)) {\n      forge.log.error(cat,\n        '[%s][%s] task queue missing [%s]',\n        task.id, task.name, task.type);\n    } else if(sTaskQueues[task.type].length === 0) {\n      // report error if queue is empty\n      forge.log.error(cat,\n        '[%s][%s] task queue empty [%s]',\n        task.id, task.name, task.type);\n    } else if(sTaskQueues[task.type][0] !== task) {\n      // report error if this task isn't the first in the queue\n      forge.log.error(cat,\n        '[%s][%s] task not first in queue [%s]',\n        task.id, task.name, task.type);\n    } else {\n      // remove ourselves from the queue\n      sTaskQueues[task.type].shift();\n      // clean up queue if it is empty\n      if(sTaskQueues[task.type].length === 0) {\n        if(sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] delete queue [%s]',\n            task.id, task.name, task.type);\n        }\n        /* Note: Only a task can delete a queue of its own type. This\n         is used as a way to synchronize tasks. If a queue for a certain\n         task type exists, then a task of that type is running.\n         */\n        delete sTaskQueues[task.type];\n      } else {\n        // dequeue the next task and start it\n        if(sVL >= 1) {\n          forge.log.verbose(cat,\n            '[%s][%s] queue start next [%s] remain:%s',\n            task.id, task.name, task.type,\n            sTaskQueues[task.type].length);\n        }\n        sTaskQueues[task.type][0].start();\n      }\n    }\n\n    if(!suppressCallbacks) {\n      // call final callback if one exists\n      if(task.error && task.failureCallback) {\n        task.failureCallback(task);\n      } else if(!task.error && task.successCallback) {\n        task.successCallback(task);\n      }\n    }\n  }\n};\n\n/* Tasks API */\nmodule.exports = forge.task = forge.task || {};\n\n/**\n * Starts a new task that will run the passed function asynchronously.\n *\n * In order to finish the task, either task.doNext() or task.fail()\n * *must* be called.\n *\n * The task must have a type (a string identifier) that can be used to\n * synchronize it with other tasks of the same type. That type can also\n * be used to cancel tasks that haven't started yet.\n *\n * To start a task, the following object must be provided as a parameter\n * (each function takes a task object as its first parameter):\n *\n * {\n *   type: the type of task.\n *   run: the function to run to execute the task.\n *   success: a callback to call when the task succeeds (optional).\n *   failure: a callback to call when the task fails (optional).\n * }\n *\n * @param options the object as described above.\n */\nforge.task.start = function(options) {\n  // create a new task\n  var task = new Task({\n    run: options.run,\n    name: options.name || sNoTaskName\n  });\n  task.type = options.type;\n  task.successCallback = options.success || null;\n  task.failureCallback = options.failure || null;\n\n  // append the task onto the appropriate queue\n  if(!(task.type in sTaskQueues)) {\n    if(sVL >= 1) {\n      forge.log.verbose(cat, '[%s][%s] create queue [%s]',\n        task.id, task.name, task.type);\n    }\n    // create the queue with the new task\n    sTaskQueues[task.type] = [task];\n    start(task);\n  } else {\n    // push the task onto the queue, it will be run after a task\n    // with the same type completes\n    sTaskQueues[options.type].push(task);\n  }\n};\n\n/**\n * Cancels all tasks of the given type that haven't started yet.\n *\n * @param type the type of task to cancel.\n */\nforge.task.cancel = function(type) {\n  // find the task queue\n  if(type in sTaskQueues) {\n    // empty all but the current task from the queue\n    sTaskQueues[type] = [sTaskQueues[type][0]];\n  }\n};\n\n/**\n * Creates a condition variable to synchronize tasks. To make a task wait\n * on the condition variable, call task.wait(condition). To notify all\n * tasks that are waiting, call condition.notify().\n *\n * @return the condition variable.\n */\nforge.task.createCondition = function() {\n  var cond = {\n    // all tasks that are blocked\n    tasks: {}\n  };\n\n  /**\n   * Causes the given task to block until notify is called. If the task\n   * is already waiting on this condition then this is a no-op.\n   *\n   * @param task the task to cause to wait.\n   */\n  cond.wait = function(task) {\n    // only block once\n    if(!(task.id in cond.tasks)) {\n       task.block();\n       cond.tasks[task.id] = task;\n    }\n  };\n\n  /**\n   * Notifies all waiting tasks to wake up.\n   */\n  cond.notify = function() {\n    // since unblock() will run the next task from here, make sure to\n    // clear the condition's blocked task list before unblocking\n    var tmp = cond.tasks;\n    cond.tasks = {};\n    for(var id in tmp) {\n      tmp[id].unblock();\n    }\n  };\n\n  return cond;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}