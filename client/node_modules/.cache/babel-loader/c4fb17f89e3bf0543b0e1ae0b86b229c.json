{"ast":null,"code":"'use strict';\n\nvar constants4 = require('../v4/constants.js');\n\nvar helpers = require('./helpers.js');\n\nvar sprintf = require('sprintf-js').sprintf;\n/**\n * @returns {String} the address in link form with a default port of 80\n */\n\n\nexports.href = function (optionalPort) {\n  if (optionalPort === undefined) {\n    optionalPort = '';\n  } else {\n    optionalPort = sprintf(':%s', optionalPort);\n  }\n\n  return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);\n};\n/**\n * @returns {String} a link suitable for conveying the address via a URL hash\n */\n\n\nexports.link = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (options.className === undefined) {\n    options.className = '';\n  }\n\n  if (options.prefix === undefined) {\n    options.prefix = '/#address=';\n  }\n\n  if (options.v4 === undefined) {\n    options.v4 = false;\n  }\n\n  var formFunction = this.correctForm;\n\n  if (options.v4) {\n    formFunction = this.to4in6;\n  }\n\n  if (options.className) {\n    return sprintf('<a href=\"%1$s%2$s\" class=\"%3$s\">%2$s</a>', options.prefix, formFunction.call(this), options.className);\n  }\n\n  return sprintf('<a href=\"%1$s%2$s\">%2$s</a>', options.prefix, formFunction.call(this));\n};\n/**\n * Groups an address\n * @returns {String}\n */\n\n\nexports.group = function () {\n  var address4 = this.address.match(constants4.RE_ADDRESS);\n  var i;\n\n  if (address4) {\n    // The IPv4 case\n    var segments = address4[0].split('.');\n    this.address = this.address.replace(constants4.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>' + '.' + '<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n  }\n\n  if (this.elidedGroups === 0) {\n    // The simple case\n    return helpers.simpleGroup(this.address);\n  } // The elided case\n\n\n  var output = [];\n  var halves = this.address.split('::');\n\n  if (halves[0].length) {\n    output.push(helpers.simpleGroup(halves[0]));\n  } else {\n    output.push('');\n  }\n\n  var classes = ['hover-group'];\n\n  for (i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++) {\n    classes.push(sprintf('group-%d', i));\n  }\n\n  output.push(sprintf('<span class=\"%s\"></span>', classes.join(' ')));\n\n  if (halves[1].length) {\n    output.push(helpers.simpleGroup(halves[1], this.elisionEnd));\n  } else {\n    output.push('');\n  }\n\n  return output.join(':');\n};","map":{"version":3,"names":["constants4","require","helpers","sprintf","exports","href","optionalPort","undefined","correctForm","link","options","className","prefix","v4","formFunction","to4in6","call","group","address4","address","match","RE_ADDRESS","i","segments","split","replace","slice","join","elidedGroups","simpleGroup","output","halves","length","push","classes","elisionBegin","elisionEnd"],"sources":["R:/CryptoCare/client/node_modules/ip-address/lib/v6/html.js"],"sourcesContent":["'use strict';\n\nvar constants4 = require('../v4/constants.js');\nvar helpers = require('./helpers.js');\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the address in link form with a default port of 80\n */\nexports.href = function (optionalPort) {\n  if (optionalPort === undefined) {\n    optionalPort = '';\n  } else {\n    optionalPort = sprintf(':%s', optionalPort);\n  }\n\n  return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);\n};\n\n/**\n * @returns {String} a link suitable for conveying the address via a URL hash\n */\nexports.link = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (options.className === undefined) {\n    options.className = '';\n  }\n\n  if (options.prefix === undefined) {\n    options.prefix = '/#address=';\n  }\n\n  if (options.v4 === undefined) {\n    options.v4 = false;\n  }\n\n  var formFunction = this.correctForm;\n\n  if (options.v4) {\n    formFunction = this.to4in6;\n  }\n\n  if (options.className) {\n    return sprintf('<a href=\"%1$s%2$s\" class=\"%3$s\">%2$s</a>',\n      options.prefix, formFunction.call(this), options.className);\n  }\n\n  return sprintf('<a href=\"%1$s%2$s\">%2$s</a>', options.prefix,\n    formFunction.call(this));\n};\n\n/**\n * Groups an address\n * @returns {String}\n */\nexports.group = function () {\n  var address4 = this.address.match(constants4.RE_ADDRESS);\n  var i;\n\n  if (address4) {\n    // The IPv4 case\n    var segments = address4[0].split('.');\n\n    this.address = this.address.replace(constants4.RE_ADDRESS,\n      sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>' +\n        '.' +\n        '<span class=\"hover-group group-v4 group-7\">%s</span>',\n        segments.slice(0, 2).join('.'),\n        segments.slice(2, 4).join('.')));\n  }\n\n  if (this.elidedGroups === 0) {\n    // The simple case\n    return helpers.simpleGroup(this.address);\n  }\n\n  // The elided case\n  var output = [];\n\n  var halves = this.address.split('::');\n\n  if (halves[0].length) {\n    output.push(helpers.simpleGroup(halves[0]));\n  } else {\n    output.push('');\n  }\n\n  var classes = ['hover-group'];\n\n  for (i = this.elisionBegin;\n       i < this.elisionBegin + this.elidedGroups; i++) {\n    classes.push(sprintf('group-%d', i));\n  }\n\n  output.push(sprintf('<span class=\"%s\"></span>', classes.join(' ')));\n\n  if (halves[1].length) {\n    output.push(helpers.simpleGroup(halves[1], this.elisionEnd));\n  } else {\n    output.push('');\n  }\n\n  return output.join(':');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}