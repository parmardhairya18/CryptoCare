{"ast":null,"code":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar v6 = require('./constants.js');\n\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  }); // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  }); // The simplest case\n\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n  var possibilities = []; // 1. elision of everything (::)\n\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  } // 2. complete elision of the middle\n\n\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  } // 4. elision from the left side\n\n\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side\n\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision\n\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle\n\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n/**\n * Generate a regular expression string that can be used to find or validate\n * all variations of this address\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {string}\n */\n\n\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n\n  var output = []; // TODO: revisit why this is necessary\n\n  var address6 = new this.constructor(this.correctForm());\n\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n\n    output.push(possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));\n\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n\n    output = [output.join(':')];\n  }\n\n  if (!optionalSubString) {\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\n  }\n\n  return output.join('');\n};\n/**\n * Generate a regular expression that can be used to find or validate all\n * variations of this address.\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {RegExp}\n */\n\n\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};","map":{"version":3,"names":["sprintf","require","v6","groupPossibilities","possibilities","join","padGroup","group","length","simpleRegularExpression","groups","zeroIndexes","forEach","i","groupInteger","parseInt","push","map","zeroIndex","elision","GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position","exports","regularExpressionString","optionalSubString","undefined","output","address6","constructor","correctForm","parsedAddress","halves","address","split","concat","regularExpression","optionalSubstring","RegExp"],"sources":["R:/New_Block/client/node_modules/ip-address/lib/v6/regular-expressions.js"],"sourcesContent":["'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar v6 = require('./constants.js');\n\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  });\n\n  // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = (i === 0 || i === v6.GROUPS - 1) ? ':' : '';\n\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  });\n\n  // The simplest case\n  possibilities.push(groups.map(padGroup).join(':'));\n\n  return groupPossibilities(possibilities);\n}\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n\n  var possibilities = [];\n\n  // 1. elision of everything (::)\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  }\n\n  // 2. complete elision of the middle\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  }\n\n  // 4. elision from the left side\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\n\n  // 5. elision from the right side\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\n\n  // 6. no elision\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\n\n  // 7. elision (including sloppy elision) from the middle\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}',\n                                 position,\n                                 elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n\n/**\n * Generate a regular expression string that can be used to find or validate\n * all variations of this address\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {string}\n */\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n\n  var output = [];\n\n  // TODO: revisit why this is necessary\n  var address6 = new this.constructor(this.correctForm());\n\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n\n    output.push(possibleElisions(address6.elidedGroups,\n                         halves[0].length !== 0,\n                         halves[1].length !== 0));\n\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n\n    output = [output.join(':')];\n  }\n\n  if (!optionalSubString) {\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\n  }\n\n  return output.join('');\n};\n\n/**\n * Generate a regular expression that can be used to find or validate all\n * variations of this address.\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {RegExp}\n */\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}