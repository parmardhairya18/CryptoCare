{"ast":null,"code":"'use strict';\n\nfunction requireCommands() {\n  const cmds = {\n    // Files (not MFS)\n    add: require('../files/add'),\n    addReadableStream: require('../files/add-readable-stream'),\n    addPullStream: require('../files/add-pull-stream'),\n    cat: require('../files/cat'),\n    catReadableStream: require('../files/cat-readable-stream'),\n    catPullStream: require('../files/cat-pull-stream'),\n    get: require('../files/get'),\n    getReadableStream: require('../files/get-readable-stream'),\n    getPullStream: require('../files/get-pull-stream'),\n    ls: require('../ls'),\n    lsReadableStream: require('../ls-readable-stream'),\n    lsPullStream: require('../ls-pull-stream'),\n    bitswap: require('../bitswap'),\n    block: require('../block'),\n    bootstrap: require('../bootstrap'),\n    commands: require('../commands'),\n    config: require('../config'),\n    dag: require('../dag'),\n    dht: require('../dht'),\n    diag: require('../diag'),\n    id: require('../id'),\n    key: require('../key'),\n    log: require('../log'),\n    mount: require('../mount'),\n    name: require('../name'),\n    object: require('../object'),\n    pin: require('../pin'),\n    ping: require('../ping'),\n    pingReadableStream: require('../ping-readable-stream'),\n    pingPullStream: require('../ping-pull-stream'),\n    refs: require('../refs'),\n    repo: require('../repo'),\n    stop: require('../stop'),\n    stats: require('../stats'),\n    swarm: require('../swarm'),\n    pubsub: require('../pubsub'),\n    update: require('../update'),\n    version: require('../version'),\n    types: require('../types'),\n    resolve: require('../resolve'),\n    dns: require('../dns')\n  }; // shutdown is an alias for stop\n\n  cmds.shutdown = cmds.stop; // TODO: crowding the 'files' namespace temporarily for interface-ipfs-core\n  // compatibility, until 'files vs mfs' naming decision is resolved.\n\n  cmds.files = function (send) {\n    const files = require('../files')(send);\n\n    return files;\n  };\n\n  cmds.util = function (send, config) {\n    const util = {\n      addFromFs: require('../util/fs-add')(send),\n      addFromStream: require('../files/add')(send),\n      addFromURL: require('../util/url-add')(send),\n      getEndpointConfig: require('../util/get-endpoint-config')(config),\n      crypto: require('libp2p-crypto'),\n      isIPFS: require('is-ipfs')\n    };\n    return util;\n  };\n\n  return cmds;\n}\n\nfunction loadCommands(send, config) {\n  const files = requireCommands();\n  const cmds = {};\n  Object.keys(files).forEach(file => {\n    cmds[file] = files[file](send, config);\n  });\n  return cmds;\n}\n\nmodule.exports = loadCommands;","map":{"version":3,"names":["requireCommands","cmds","add","require","addReadableStream","addPullStream","cat","catReadableStream","catPullStream","get","getReadableStream","getPullStream","ls","lsReadableStream","lsPullStream","bitswap","block","bootstrap","commands","config","dag","dht","diag","id","key","log","mount","name","object","pin","ping","pingReadableStream","pingPullStream","refs","repo","stop","stats","swarm","pubsub","update","version","types","resolve","dns","shutdown","files","send","util","addFromFs","addFromStream","addFromURL","getEndpointConfig","crypto","isIPFS","loadCommands","Object","keys","forEach","file","module","exports"],"sources":["R:/CryptoCare/client/node_modules/ipfs-api/src/utils/load-commands.js"],"sourcesContent":["'use strict'\n\nfunction requireCommands () {\n  const cmds = {\n    // Files (not MFS)\n    add: require('../files/add'),\n    addReadableStream: require('../files/add-readable-stream'),\n    addPullStream: require('../files/add-pull-stream'),\n    cat: require('../files/cat'),\n    catReadableStream: require('../files/cat-readable-stream'),\n    catPullStream: require('../files/cat-pull-stream'),\n    get: require('../files/get'),\n    getReadableStream: require('../files/get-readable-stream'),\n    getPullStream: require('../files/get-pull-stream'),\n    ls: require('../ls'),\n    lsReadableStream: require('../ls-readable-stream'),\n    lsPullStream: require('../ls-pull-stream'),\n\n    bitswap: require('../bitswap'),\n    block: require('../block'),\n    bootstrap: require('../bootstrap'),\n    commands: require('../commands'),\n    config: require('../config'),\n    dag: require('../dag'),\n    dht: require('../dht'),\n    diag: require('../diag'),\n    id: require('../id'),\n    key: require('../key'),\n    log: require('../log'),\n    mount: require('../mount'),\n    name: require('../name'),\n    object: require('../object'),\n    pin: require('../pin'),\n    ping: require('../ping'),\n    pingReadableStream: require('../ping-readable-stream'),\n    pingPullStream: require('../ping-pull-stream'),\n    refs: require('../refs'),\n    repo: require('../repo'),\n    stop: require('../stop'),\n    stats: require('../stats'),\n    swarm: require('../swarm'),\n    pubsub: require('../pubsub'),\n    update: require('../update'),\n    version: require('../version'),\n    types: require('../types'),\n    resolve: require('../resolve'),\n    dns: require('../dns')\n  }\n\n  // shutdown is an alias for stop\n  cmds.shutdown = cmds.stop\n\n  // TODO: crowding the 'files' namespace temporarily for interface-ipfs-core\n  // compatibility, until 'files vs mfs' naming decision is resolved.\n  cmds.files = function (send) {\n    const files = require('../files')(send)\n\n    return files\n  }\n\n  cmds.util = function (send, config) {\n    const util = {\n      addFromFs: require('../util/fs-add')(send),\n      addFromStream: require('../files/add')(send),\n      addFromURL: require('../util/url-add')(send),\n      getEndpointConfig: require('../util/get-endpoint-config')(config),\n      crypto: require('libp2p-crypto'),\n      isIPFS: require('is-ipfs')\n    }\n    return util\n  }\n\n  return cmds\n}\n\nfunction loadCommands (send, config) {\n  const files = requireCommands()\n  const cmds = {}\n\n  Object.keys(files).forEach((file) => {\n    cmds[file] = files[file](send, config)\n  })\n\n  return cmds\n}\n\nmodule.exports = loadCommands\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}